CCS PCM C Compiler, Version 4.114, 93460303               06-Oct-12 00:29

               Filename: D:\Company\Project\Dien Dan\PIC\Bai 12. Input Capture\code\main.lst

               ROM used: 1318 words (16%)
                         Largest free fragment is 2048
               RAM used: 50 (14%) at main() level
                         79 (21%) worst case
               Stack:    4 worst case (3 in main + 1 for interrupts)

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   492
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.0
001A:  GOTO   01D
001B:  BTFSC  0C.0
001C:  GOTO   034
001D:  MOVLW  8D
001E:  MOVWF  04
001F:  BTFSS  00.0
0020:  GOTO   023
0021:  BTFSC  0D.0
0022:  GOTO   037
0023:  MOVF   22,W
0024:  MOVWF  04
0025:  MOVF   23,W
0026:  MOVWF  77
0027:  MOVF   24,W
0028:  MOVWF  78
0029:  MOVF   25,W
002A:  MOVWF  79
002B:  MOVF   26,W
002C:  MOVWF  7A
002D:  MOVF   20,W
002E:  MOVWF  0A
002F:  SWAPF  21,W
0030:  MOVWF  03
0031:  SWAPF  7F,F
0032:  SWAPF  7F,W
0033:  RETFIE
0034:  BCF    0A.3
0035:  BCF    0A.4
0036:  GOTO   070
0037:  BCF    0A.3
0038:  BCF    0A.4
0039:  GOTO   03A
.................... #include <main.h> 
.................... /** 
....................   ****************************************************************************** 
....................   * Ten Tep      :        main.h 
....................   * Tac Gia      :        Nguyen Quy Nhat 
....................   * Cong Ty      :        MinhHaGroup 
....................   * Website      :        BanLinhKien.Vn 
....................   * Phien Ban    :        V1.0.0 
....................   * Ngay         :        31-08-2012 
....................   * Tom Tat      :        Khai bao cac thu vien. 
....................   *                       Cau hinh mot so chuc nang cho trinh bien dich. 
....................   *                       Cau hinh mot so chuc nang cho CHIP. 
....................   *                       Dinh nghia I/O. 
....................   *            
....................   * 
....................   ****************************************************************************** 
....................   * Chu Y      :           
....................   *                           
....................   *                       
....................   ****************************************************************************** 
....................   */ 
.................... #ifndef _MAIN_ 
.................... #define _MAIN_ 
.................... /***************KHAI BAO CAC THU VIEN*****************/    
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... /**************KHAI BAO CAU HINH FUSE BIT************/ 
.................... /////////////////////////////////////////////////////// 
.................... //                                                   // 
.................... // Voi moi muc phai chon mot trong danh sach dua ra  // 
.................... //                                                   // 
.................... /////////////////////////////////////////////////////// 
....................  
.................... //_________________POINTER AND ADC____________________ 
....................  
.................... #device *=16 adc=10          //   su dung con tro 16 bit, bo chuyen doi ADC 10 bit 
.................... //#device *=16 adc=8          //  su dung con tro 16 bit, bo chuyen doi ADC 8 bit 
....................  
.................... //__________________WATCH DOG TIMER___________________ 
....................  
.................... #FUSES NOWDT                   //   khong su dung bo Watch Dog Timer 
....................  
.................... //__________________HIGH SPEED OSC____________________ 
....................  
.................... //#FUSES LP                        // Su dung nguon dao dong tan so thap < 200 khz 
.................... //#FUSES XT                        // Dao dong thach anh <= 4mhz voi PCM/PCH , 3mhz to 10 mhz voi PCD 
.................... //#FUSES RC                        // Dao dong RC voi CLKOUT 
.................... #FUSES HS                      //Dao dong tan so cao (> 4mhz voi PCM/PCH) (>10mhz voi PCD) 
....................  
.................... //__________________POWER UP TIMER____________________ 
....................  
.................... #FUSES NOPUT                    //Khong su dung Power Up Timer 
.................... //#FUSES PUT                        //Su dung Power Up Timer 
.................... //__________________BROWN OUT_________________________ 
....................  
.................... #FUSES NOBROWNOUT               //Khong reset chip khi BrownOut 
.................... //#FUSES BROWNOUT                   //Reset chi khi co BrownOut 
.................... //______________LOW VOLTAGE PROGRAM___________________ 
....................  
.................... #FUSES NOLVP                    //No low voltage programing, B3(PIC16) or B5(PIC18) used for I/O 
.................... //#FUSES LVP                        //Low Voltage Programming on B3(PIC16) or B5(PIC18) 
.................... //______________CODE PROTECED EEPROM__________________ 
....................  
.................... #FUSES NOCPD                    //Khong bao ve du lieu EEPROM 
.................... //#FUSES CPD                        //Dung che do bao ve du lieu EEPROM 
....................  
.................... //_____________PROGRAM WRITE PROTECED_________________ 
....................  
.................... //#FUSES WRT                      //Program Memory Write Protected 
.................... //#FUSES WRT_50%                  //Lower half of Program Memory is Write Protected 
.................... //#FUSES WRT_5%                   //Lower 255 bytes of Program Memory is Write Protected 
.................... #FUSES NOWRT                    //Program memory not write protected 
....................  
.................... //_____________ENABLE DEBUG MODE FOR ICD______________ 
....................  
.................... //#device ICD=TRUE            // Kich hoat chuc nang DEBUG ICD Integrated Chip Debugging 
.................... //________________DEBUG FOR ICD_______________________ 
....................  
.................... #FUSES NODEBUG                  //Khong su dung che do Debug voi ICD 
.................... //#FUSES DEBUG                      // Su dung che do Debug voi ICD 
....................  
.................... //___________CODE PROTECED FROM READING_______________ 
.................... #FUSES NOPROTECT                // Cho phep doc lai Code 
.................... //#FUSES PROTECT                    // Khong cho phep doc lai code  
....................  
.................... //___________________CLOCK____________________________ 
....................  
.................... #use delay(clock=24000000)            // Su dung tan so 24Mhz, khong reset watch dog khi goi den ham delay. 
*
00BD:  MOVLW  4F
00BE:  MOVWF  04
00BF:  BCF    03.7
00C0:  MOVF   00,W
00C1:  BTFSC  03.2
00C2:  GOTO   0D1
00C3:  MOVLW  07
00C4:  MOVWF  78
00C5:  CLRF   77
00C6:  DECFSZ 77,F
00C7:  GOTO   0C6
00C8:  DECFSZ 78,F
00C9:  GOTO   0C5
00CA:  MOVLW  C7
00CB:  MOVWF  77
00CC:  DECFSZ 77,F
00CD:  GOTO   0CC
00CE:  NOP
00CF:  DECFSZ 00,F
00D0:  GOTO   0C3
00D1:  RETURN
.................... //#use delay(clock=20000000,RESTART_WDT)   // Su dung tan so 20Mhz, reset watch dog khi goi den ham delay. 
....................  
.................... //________________FAST_STANDAR I/O PORTA___________________ 
....................  
.................... //#use FAST_IO(A)          // Thiet lap che do fast I/O cho PORTA, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... #use STANDARD_IO(A)     // Thiet lap che do chuan I/O cho PORTA, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(A)       // 
....................  
.................... //________________FAST_STANDAR I/O PORTB___________________ 
....................  
.................... //#use FAST_IO(B)          // Thiet lap che do fast I/O cho PORTB, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... #use STANDARD_IO(B)     // Thiet lap che do chuan I/O cho PORTB, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(B)       // 
....................  
.................... //________________FAST_STANDAR I/O PORTC____________________ 
....................  
.................... #use FAST_IO(C)          // Thiet lap che do fast I/O cho PORTC, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... //#use STANDARD_IO(C)     // Thiet lap che do chuan I/O cho PORTC, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(C)       // 
....................  
.................... //________________FAST_STANDAR I/O PORTD_____________________ 
....................  
.................... #use FAST_IO(D)          // Thiet lap che do fast I/O cho PORTD, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... //#use STANDARD_IO(D)     // Thiet lap che do chuan I/O cho PORTD, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(D)       // 
....................  
.................... //_______________FAST_STANDAR I/O PORTE___________________ 
....................  
.................... #use FAST_IO(E)        // Thiet lap che do fast I/O cho PORTE, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... //#use STANDARD_IO(E)     // Thiet lap che do chuan I/O cho PORTE, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(E)       // 
....................  
....................  
.................... //________________________CASE_____________________________ 
....................  
....................  
.................... #CASE               // Phan biet chu hoa va chu thuong trong khi lap trinh code 
....................  
....................  
.................... /************** DINH NGHIA CAC CHAN I/O ************/ 
....................  
.................... //////////////////////////////////////////////////////// 
.................... //   Xoa chu thich cho cac chuc nang I/O su dung       // 
.................... //  Dinh nghia lai cac chan cho phu hop voi phan cung //  
.................... //////////////////////////////////////////////////////// 
....................  
.................... //______________________I/O LCD____________________________ 
.................... #define LCD_RS PIN_E0                         
.................... #define LCD_RW PIN_E1 
.................... #define LCD_EN PIN_E2 
.................... #define LCD_D4 PIN_D4                  
.................... #define LCD_D5 PIN_D5 
.................... #define LCD_D6 PIN_D6 
.................... #define LCD_D7 PIN_D7  
.................... #endif 
....................  
.................... #include <var.h> 
.................... #ifndef _VAR_ 
.................... #define _VAR_ 
.................... int1 enable_display=0; 
.................... unsigned int16 Cu_Value=0; 
.................... unsigned int32 Count_Buffer=0; 
.................... unsigned int32 Value_Count=0; 
.................... #endif                                           
....................  
.................... #include "lcd.c" 
.................... /** 
....................   ****************************************************************************** 
....................   * Ten Tep      :        lcd_16x2.c 
....................   * Tac Gia      :        Nguyen Quy Nhat 
....................   * Cong Ty      :         MinhHaGroup 
....................   * Website    :         BanLinhKien.Vn 
....................   * Phien Ban   :         V1.0.0 
....................   * Ngay         :       31-07-2012 
....................   * Tom Tat   :     Dinh nghia cac ham dieu khien LCD 16x2. 
....................   *            
....................   * 
....................   ****************************************************************************** 
....................   * Chu Y      : 
....................   *                       
....................   ****************************************************************************** 
....................   */ 
.................... //Tao Xung 
....................  void LCD_Enable(void) 
.................... { 
....................  output_high(LCD_EN); 
00D2:  BSF    09.2
....................  delay_us(3); 
00D3:  MOVLW  05
00D4:  MOVWF  77
00D5:  DECFSZ 77,F
00D6:  GOTO   0D5
00D7:  GOTO   0D8
....................  output_low(LCD_EN); 
00D8:  BCF    09.2
....................  delay_us(50);  
00D9:  MOVLW  63
00DA:  MOVWF  77
00DB:  DECFSZ 77,F
00DC:  GOTO   0DB
00DD:  GOTO   0DE
.................... } 
00DE:  RETURN
.................... //Ham Gui 4 Bit Du Lieu Ra LCD 
....................  void LCD_Send4Bit( unsigned char Data ) 
.................... { 
....................  output_bit(LCD_D4,Data&0x01); 
*
0096:  BTFSC  52.0
0097:  GOTO   09A
0098:  BCF    08.4
0099:  GOTO   09B
009A:  BSF    08.4
....................  output_bit(LCD_D5,(Data>>1)&1); 
009B:  BCF    03.0
009C:  RRF    52,W
009D:  ANDLW  01
009E:  BTFSS  03.2
009F:  GOTO   0A2
00A0:  BCF    08.5
00A1:  GOTO   0A3
00A2:  BSF    08.5
....................  output_bit(LCD_D6,(Data>>2)&1); 
00A3:  RRF    52,W
00A4:  MOVWF  77
00A5:  RRF    77,F
00A6:  MOVLW  3F
00A7:  ANDWF  77,F
00A8:  MOVF   77,W
00A9:  ANDLW  01
00AA:  BTFSS  03.2
00AB:  GOTO   0AE
00AC:  BCF    08.6
00AD:  GOTO   0AF
00AE:  BSF    08.6
....................  output_bit(LCD_D7,(Data>>3)&1); 
00AF:  RRF    52,W
00B0:  MOVWF  77
00B1:  RRF    77,F
00B2:  RRF    77,F
00B3:  MOVLW  1F
00B4:  ANDWF  77,F
00B5:  MOVF   77,W
00B6:  ANDLW  01
00B7:  BTFSS  03.2
00B8:  GOTO   0BB
00B9:  BCF    08.7
00BA:  GOTO   0BC
00BB:  BSF    08.7
.................... } 
00BC:  RETURN
.................... // Ham Gui 1 Lenh Cho LCD 
....................  void LCD_SendCommand (unsigned char command ) 
.................... { 
.................... LCD_Send4Bit  ( command >>4 );/* Gui 4 bit cao */ 
*
00DF:  SWAPF  50,W
00E0:  MOVWF  51
00E1:  MOVLW  0F
00E2:  ANDWF  51,F
00E3:  MOVF   51,W
00E4:  MOVWF  52
00E5:  CALL   096
.................... LCD_Enable () ; 
00E6:  CALL   0D2
.................... LCD_Send4Bit  ( command  );      /* Gui 4 bit thap*/ 
00E7:  MOVF   50,W
00E8:  MOVWF  52
00E9:  CALL   096
.................... LCD_Enable () ; 
00EA:  CALL   0D2
.................... } 
00EB:  RETURN
.................... // Ham Khoi Tao LCD 
....................  void LCD_Init ( void ) 
.................... { 
.................... output_drive(LCD_D4); 
00EC:  BSF    03.5
00ED:  BCF    08.4
.................... output_drive(LCD_D5); 
00EE:  BCF    08.5
.................... output_drive(LCD_D6); 
00EF:  BCF    08.6
.................... output_drive(LCD_D7); 
00F0:  BCF    08.7
.................... output_drive(LCD_EN); 
00F1:  BCF    09.2
.................... output_drive(LCD_RS); 
00F2:  BCF    09.0
.................... output_drive(LCD_RW); 
00F3:  BCF    09.1
.................... LCD_Send4Bit(0x00); 
00F4:  BCF    03.5
00F5:  CLRF   52
00F6:  CALL   096
.................... delay_ms(20); 
00F7:  MOVLW  14
00F8:  MOVWF  4F
00F9:  CALL   0BD
.................... output_low(LCD_RS); 
00FA:  BCF    09.0
.................... output_low(LCD_RW); 
00FB:  BCF    09.1
.................... LCD_Send4Bit(0x03); 
00FC:  MOVLW  03
00FD:  MOVWF  52
00FE:  CALL   096
.................... LCD_Enable(); 
00FF:  CALL   0D2
.................... delay_ms(5); 
0100:  MOVLW  05
0101:  MOVWF  4F
0102:  CALL   0BD
.................... LCD_Enable(); 
0103:  CALL   0D2
.................... delay_us(100); 
0104:  MOVLW  C7
0105:  MOVWF  77
0106:  DECFSZ 77,F
0107:  GOTO   106
0108:  GOTO   109
.................... LCD_Enable(); 
0109:  CALL   0D2
.................... LCD_Send4Bit(0x02); 
010A:  MOVLW  02
010B:  MOVWF  52
010C:  CALL   096
.................... LCD_Enable(); 
010D:  CALL   0D2
.................... LCD_SendCommand( 0x28 );      // giao thuc 4 bit, hien thi 2 hang, ki tu 5x8 
010E:  MOVLW  28
010F:  MOVWF  50
0110:  CALL   0DF
.................... LCD_SendCommand( 0x0c);    // cho phep hien thi man hinh 
0111:  MOVLW  0C
0112:  MOVWF  50
0113:  CALL   0DF
.................... LCD_SendCommand( 0x06 );      // tang ID, khong dich khung hinh 
0114:  MOVLW  06
0115:  MOVWF  50
0116:  CALL   0DF
.................... LCD_SendCommand( 0x01 ); // xoa toan bo khung hinh 
0117:  MOVLW  01
0118:  MOVWF  50
0119:  CALL   0DF
.................... } 
011A:  BCF    0A.3
011B:  BCF    0A.4
011C:  GOTO   4AC (RETURN)
.................... void LCD_Gotoxy(unsigned char x, unsigned char y) 
.................... { 
....................   unsigned char address; 
....................   if(!y) 
*
0198:  MOVF   4D,F
0199:  BTFSS  03.2
019A:  GOTO   19F
....................   address = (0x80+x); 
019B:  MOVLW  80
019C:  ADDWF  4C,W
019D:  MOVWF  4E
....................   else 
019E:  GOTO   1A2
....................   address = (0xC0+x); 
019F:  MOVLW  C0
01A0:  ADDWF  4C,W
01A1:  MOVWF  4E
....................   delay_ms(1); 
01A2:  MOVLW  01
01A3:  MOVWF  4F
01A4:  CALL   0BD
....................   LCD_SendCommand(address); 
01A5:  MOVF   4E,W
01A6:  MOVWF  50
01A7:  CALL   0DF
....................   delay_ms(1); 
01A8:  MOVLW  01
01A9:  MOVWF  4F
01AA:  CALL   0BD
.................... } 
01AB:  RETURN
.................... // Ham Xoa Man Hinh LCD 
.................... void LCD_Clear() 
.................... { 
....................   LCD_SendCommand(0x01);   
*
018F:  MOVLW  01
0190:  MOVWF  50
0191:  CALL   0DF
....................   delay_ms(10); 
0192:  MOVLW  0A
0193:  MOVWF  4F
0194:  CALL   0BD
.................... } 
0195:  BCF    0A.3
0196:  BCF    0A.4
0197:  GOTO   4C5 (RETURN)
.................... // Ham Gui 1 Ki Tu Len LCD 
....................  void LCD_PutChar ( unsigned char Data ) 
.................... { 
....................  output_high(LCD_RS); 
*
0185:  BSF    09.0
....................  LCD_SendCommand( Data ); 
0186:  MOVF   4F,W
0187:  MOVWF  50
0188:  CALL   0DF
....................  output_low(LCD_RS); 
0189:  BCF    09.0
.................... } 
.................... void LCD_Puts (char *s) 
.................... { 
....................    while (*s) 
....................    { 
*
0170:  MOVF   4D,W
0171:  MOVWF  7A
0172:  MOVF   4C,W
0173:  MOVWF  04
0174:  BCF    03.7
0175:  BTFSC  7A.0
0176:  BSF    03.7
0177:  MOVF   00,F
0178:  BTFSC  03.2
0179:  GOTO   18E
....................       LCD_PutChar(*s); 
017A:  MOVF   4D,W
017B:  MOVWF  7A
017C:  MOVF   4C,W
017D:  MOVWF  04
017E:  BCF    03.7
017F:  BTFSC  7A.0
0180:  BSF    03.7
0181:  MOVF   00,W
0182:  MOVWF  4E
0183:  MOVF   4E,W
0184:  MOVWF  4F
....................       s++; 
*
018A:  INCF   4C,F
018B:  BTFSC  03.2
018C:  INCF   4D,F
....................    } 
018D:  GOTO   170
.................... } 
018E:  RETURN
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... #include "timer.c" 
.................... #ifndef __TIMER_ 
.................... #define __TIMER_ 
.................... void timer0_config() 
.................... { 
.................... ////////////////////////////////////////////////////////////// 
.................... //              Cau Hinh Timer 0                     // 
.................... //         T_tm0: Chu ky xung dem cua timer 0            // 
.................... //         T_osc: Chu ky dao dong su dung cho chip         // 
.................... ////////////////////////////////////////////////////////////// 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1|RTCC_8_bit);      //   T_tm0=T_osc*4*1 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_2|RTCC_8_bit);      //   T_tm0=T_osc*4*2 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_4|RTCC_8_bit);      //   T_tm0=T_osc*4*4 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_8|RTCC_8_bit);      //   T_tm0=T_osc*4*8 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_16|RTCC_8_bit);      //   T_tm0=T_osc*4*16 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_32|RTCC_8_bit);      //   T_tm0=T_osc*4*32 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_64|RTCC_8_bit);      //   T_tm0=T_osc*4*64 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_128|RTCC_8_bit);      //   T_tm0=T_osc*4*128 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256|RTCC_8_bit);      //   T_tm0=T_osc*4*256 
.................... ///setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_1|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 1 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_2|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 2 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_4|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 4 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_8|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 8 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_16|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 16 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_32|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 32 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_64|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 64 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_128|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 128 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_256|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 256 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_1|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 1 suon xuong tai chan PIN_A4 (T0CKI)    
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_2|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 2 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_4|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 4 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_8|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 8 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_16|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 16 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_32|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 32 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_64|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 64 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_128|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 128 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_256|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 256 suon xuong tai chan PIN_A4 (T0CKI) 
....................  
.................... /******************Thiet lap ngat timer*********************/ 
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
.................... //                   NGAT TRAN TIMER 0            // 
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
.................... //enable_interrupts(INT_TIMER0);   //Cho phep ngat tran timer0 hoat dong 
.................... //disable_interrupts(INT_TIMER0);   //Khong cho phep ngat tran timer0 hoat dong (mac dinh) 
....................  
.................... } 
.................... void timer1_config() 
.................... { 
.................... setup_timer_1(T1_INTERNAL|T1_DIV_BY_1);               // 
*
01AC:  MOVLW  85
01AD:  MOVWF  10
.................... //setup_timer_1(T1_INTERNAL|T1_DIV_BY_2);               // 
.................... //setup_timer_1(T1_INTERNAL|T1_DIV_BY_4);               // 
.................... //setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);               // 
.................... //setup_timer_1(T1_EXTERNAL|T1_DIV_BY_1);               // 
.................... //setup_timer_1(T1_EXTERNAL|T1_CLK_OUT);               // 
.................... //setup_timer_1(T1_EXTERNAL|T1_EXTERNAL_SYNC);            // 
.................... //setup_timer_1(T1_EXTERNAL|T1_CLK_OUT|T1_EXTERNAL_SYNC);   // 
.................... //setup_timer_1(T1_DISABLED);                           // 
....................  
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
.................... //               NGAT TRAN TIMER 1            // 
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
.................... enable_interrupts(INT_TIMER1);   //Cho phep ngat tran timer1 hoat dong 
01AE:  BSF    03.5
01AF:  BSF    0C.0
.................... //disable_interrupts(INT_TIMER1);   //Khong cho phep ngat tran timer1 hoat dong (mac dinh) 
....................  
.................... } 
01B0:  BCF    03.5
01B1:  BCF    0A.3
01B2:  BCF    0A.4
01B3:  GOTO   4D7 (RETURN)
.................... void timer2_config() 
.................... { 
.................... //############################################################ 
.................... //              Cau Hinh Timer 2                     // 
.................... //         Over_Period: 1-255                        // 
.................... //         Int_Period : 1-16                        // 
.................... //         T_Ov   :Chu ky tran bo dem timer2            // 
.................... //         T_In   :Chu ky xay ra ngat tran timer 0      // 
.................... //         T_osc   : Chu ky dao dong su dung cho chip      // 
.................... //############################################################ 
....................  
.................... //setup_timer_2(T2_DIV_BY_1,Over_Period,Int_Period);      //   T_ov=T_osc*4*1*(1+Over_Period)   ;   T_In=T_osc*4*1*(1+Over_Period)*Int_Period 
.................... //setup_timer_2(T2_DIV_BY_4,Over_Period,Int_Period);      //   T_ov=T_osc*4*4*(1+Over_Period)   ;   T_In=T_osc*4*4*(1+Over_Period)*Int_Period 
.................... //setup_timer_2(T2_DIV_BY_16,Over_Period,Int_Period);      //   T_ov=T_osc*4*16*(1+Over_Period)   ;   T_In=T_osc*4*16*(1+Over_Period)*Int_Period 
.................... //setup_timer_2(T2_DISABLED,0,1);                      //   Khong su dung bo dem timer2 
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
.................... //               NGAT TRAN TIMER 2            // 
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
....................  
.................... //enable_interrupts(INT_TIMER2);   //Cho phep ngat tran timer2 hoat dong 
.................... disable_interrupts(INT_TIMER2);   //Khong cho phep ngat tran timer2 hoat dong (mac dinh) 
.................... } 
.................... #endif 
....................  
.................... #int_CCP2 
.................... void  ngat_CCP2(void)  
.................... {   
....................    Value_Count = Count_Buffer+CCP_2-Cu_Value; 
*
003A:  MOVF   1B,W
003B:  ADDWF  2A,W
003C:  MOVWF  66
003D:  MOVF   2B,W
003E:  MOVWF  67
003F:  MOVF   1C,W
0040:  BTFSC  03.0
0041:  INCFSZ 1C,W
0042:  ADDWF  67,F
0043:  MOVF   2C,W
0044:  MOVWF  68
0045:  MOVLW  00
0046:  BTFSC  03.0
0047:  MOVLW  01
0048:  ADDWF  68,F
0049:  MOVF   2D,W
004A:  MOVWF  69
004B:  MOVLW  00
004C:  BTFSC  03.0
004D:  MOVLW  01
004E:  ADDWF  69,F
004F:  MOVF   28,W
0050:  SUBWF  66,W
0051:  MOVWF  2E
0052:  MOVF   67,W
0053:  MOVWF  2F
0054:  MOVF   29,W
0055:  BTFSS  03.0
0056:  INCFSZ 29,W
0057:  SUBWF  2F,F
0058:  MOVF   68,W
0059:  MOVWF  30
005A:  MOVLW  00
005B:  BTFSS  03.0
005C:  MOVLW  01
005D:  SUBWF  30,F
005E:  MOVF   69,W
005F:  MOVWF  31
0060:  MOVLW  00
0061:  BTFSS  03.0
0062:  MOVLW  01
0063:  SUBWF  31,F
....................    Cu_Value    = CCP_2; 
0064:  MOVF   1C,W
0065:  MOVWF  29
0066:  MOVF   1B,W
0067:  MOVWF  28
....................    Count_Buffer=0; 
0068:  CLRF   2D
0069:  CLRF   2C
006A:  CLRF   2B
006B:  CLRF   2A
.................... } 
006C:  BCF    0D.0
006D:  BCF    0A.3
006E:  BCF    0A.4
006F:  GOTO   023
.................... #INT_TIMER1            
.................... void  ngat_timer1(void)  
.................... { 
....................    Count_Buffer+=0xffff;    
0070:  MOVLW  FF
0071:  ADDWF  2A,F
0072:  BTFSS  03.0
0073:  ADDWF  2B,F
0074:  MOVLW  00
0075:  BTFSC  03.0
0076:  MOVLW  01
0077:  ADDWF  2C,F
0078:  MOVLW  00
0079:  BTFSC  03.0
007A:  MOVLW  01
007B:  ADDWF  2D,F
.................... } 
007C:  BCF    0C.0
007D:  BCF    0A.3
007E:  BCF    0A.4
007F:  GOTO   023
.................... void main() 
.................... {   
*
0492:  CLRF   04
0493:  BCF    03.7
0494:  MOVLW  1F
0495:  ANDWF  03,F
0496:  BCF    27.0
0497:  CLRF   29
0498:  CLRF   28
0499:  CLRF   2D
049A:  CLRF   2C
049B:  CLRF   2B
049C:  CLRF   2A
049D:  CLRF   31
049E:  CLRF   30
049F:  CLRF   2F
04A0:  CLRF   2E
04A1:  CLRF   33
04A2:  CLRF   32
04A3:  BSF    03.5
04A4:  BSF    1F.0
04A5:  BSF    1F.1
04A6:  BSF    1F.2
04A7:  BCF    1F.3
04A8:  MOVLW  07
04A9:  MOVWF  1C
....................    unsigned char str[20]; 
....................    float tan_so; 
....................    LCD_Init(); 
04AA:  BCF    03.5
04AB:  GOTO   0EC
....................    sprintf(str,"INPUT CAPTURE"); 
04AC:  CLRF   33
04AD:  MOVLW  34
04AE:  MOVWF  32
04AF:  MOVLW  80
04B0:  BSF    03.6
04B1:  MOVWF  0D
04B2:  MOVLW  00
04B3:  MOVWF  0F
04B4:  BCF    03.6
04B5:  CALL   12A
....................    delay_ms(10); 
04B6:  MOVLW  0A
04B7:  MOVWF  4F
04B8:  CALL   0BD
....................    LCD_Puts(str); 
04B9:  CLRF   4D
04BA:  MOVLW  34
04BB:  MOVWF  4C
04BC:  CALL   170
....................    delay_ms(1000); 
04BD:  MOVLW  04
04BE:  MOVWF  4C
04BF:  MOVLW  FA
04C0:  MOVWF  4F
04C1:  CALL   0BD
04C2:  DECFSZ 4C,F
04C3:  GOTO   4BF
....................    LCD_Clear(); 
04C4:  GOTO   18F
....................    sprintf(str,"BanLinhKien.Vn"); 
04C5:  CLRF   33
04C6:  MOVLW  34
04C7:  MOVWF  32
04C8:  MOVLW  87
04C9:  BSF    03.6
04CA:  MOVWF  0D
04CB:  MOVLW  00
04CC:  MOVWF  0F
04CD:  BCF    03.6
04CE:  CALL   12A
....................    LCD_Gotoxy(0,0); 
04CF:  CLRF   4C
04D0:  CLRF   4D
04D1:  CALL   198
....................    LCD_Puts(str); 
04D2:  CLRF   4D
04D3:  MOVLW  34
04D4:  MOVWF  4C
04D5:  CALL   170
....................    timer1_config(); 
04D6:  GOTO   1AC
....................    set_timer1(0); 
04D7:  CLRF   0F
04D8:  CLRF   0E
....................    enable_interrupts(GLOBAL);  
04D9:  MOVLW  C0
04DA:  IORWF  0B,F
....................    enable_interrupts(INT_CCP2); 
04DB:  BSF    03.5
04DC:  BSF    0D.0
....................    setup_ccp2(CCP_CAPTURE_FE); 
04DD:  BCF    03.5
04DE:  CLRF   1D
04DF:  MOVLW  04
04E0:  MOVWF  1D
....................    while(TRUE) 
....................    { 
....................       tan_so=6000000/((float)(Value_Count)); 
04E1:  MOVF   31,W
04E2:  MOVWF  4F
04E3:  MOVF   30,W
04E4:  MOVWF  4E
04E5:  MOVF   2F,W
04E6:  MOVWF  4D
04E7:  MOVF   2E,W
04E8:  MOVWF  4C
04E9:  GOTO   1B4
04EA:  CLRF   4F
04EB:  MOVLW  1B
04EC:  MOVWF  4E
04ED:  MOVLW  37
04EE:  MOVWF  4D
04EF:  MOVLW  95
04F0:  MOVWF  4C
04F1:  MOVF   7A,W
04F2:  MOVWF  53
04F3:  MOVF   79,W
04F4:  MOVWF  52
04F5:  MOVF   78,W
04F6:  MOVWF  51
04F7:  MOVF   77,W
04F8:  MOVWF  50
04F9:  GOTO   1D1
04FA:  MOVF   7A,W
04FB:  MOVWF  4B
04FC:  MOVF   79,W
04FD:  MOVWF  4A
04FE:  MOVF   78,W
04FF:  MOVWF  49
0500:  MOVF   77,W
0501:  MOVWF  48
....................       LCD_Gotoxy(0,1); 
0502:  CLRF   4C
0503:  MOVLW  01
0504:  MOVWF  4D
0505:  CALL   198
....................       sprintf(str,"Tan So= %6.1f",tan_so); 
0506:  CLRF   33
0507:  MOVLW  34
0508:  MOVWF  32
0509:  MOVLW  8F
050A:  BSF    03.6
050B:  MOVWF  0D
050C:  MOVLW  00
050D:  MOVWF  0F
050E:  BCF    03.0
050F:  MOVLW  08
0510:  BCF    03.6
0511:  MOVWF  4C
0512:  GOTO   29D
0513:  MOVLW  05
0514:  MOVWF  04
0515:  MOVF   4B,W
0516:  MOVWF  4F
0517:  MOVF   4A,W
0518:  MOVWF  4E
0519:  MOVF   49,W
051A:  MOVWF  4D
051B:  MOVF   48,W
051C:  MOVWF  4C
051D:  MOVLW  01
051E:  MOVWF  50
051F:  GOTO   33D
....................       //sprintf(str,"Tan So= %6lu",Value_Count); 
....................       LCD_Puts(str); 
0520:  CLRF   4D
0521:  MOVLW  34
0522:  MOVWF  4C
0523:  CALL   170
....................    } 
0524:  GOTO   4E1
.................... }                 
0525:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
