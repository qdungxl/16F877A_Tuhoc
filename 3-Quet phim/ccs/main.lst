CCS PCM C Compiler, Version 5.015, 5967               23-Apr-22 21:22

               Filename:   D:\STUDY\PIC\3-Quet phim\ccs\main.lst

               ROM used:   476 words (6%)
                           Largest free fragment is 2048
               RAM used:   22 (6%) at main() level
                           28 (8%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   177
0003:  NOP
.................... #include <main.h> 
....................  
.................... #ifndef _MAIN_ 
.................... #define _MAIN_ 
.................... /***************KHAI BAO CAC THU VIEN*****************/    
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA CB,22
0005:  DATA 59,10
0006:  DATA 34,2C
0007:  DATA 34,10
0008:  DATA 0A,00
0009:  DATA CE,3A
000A:  DATA 74,10
000B:  DATA E4,30
000C:  DATA 20,37
000D:  DATA E8,30
000E:  DATA 6E,1D
000F:  DATA A0,12
0010:  DATA 63,10
0011:  DATA 0A,00
*
0022:  MOVF   0B,W
0023:  MOVWF  31
0024:  BCF    0B.7
0025:  BSF    03.5
0026:  BSF    03.6
0027:  BSF    0C.7
0028:  BSF    0C.0
0029:  NOP
002A:  NOP
002B:  BCF    03.5
002C:  BCF    03.6
002D:  BTFSC  31.7
002E:  BSF    0B.7
002F:  BSF    03.6
0030:  MOVF   0C,W
0031:  ANDLW  7F
0032:  BTFSC  03.2
0033:  GOTO   078
0034:  BCF    03.6
0035:  MOVWF  31
0036:  BSF    03.6
0037:  MOVF   0D,W
0038:  BCF    03.6
0039:  MOVWF  32
003A:  BSF    03.6
003B:  MOVF   0F,W
003C:  BCF    03.6
003D:  MOVWF  33
003E:  MOVF   31,W
003F:  BTFSS  0C.4
0040:  GOTO   03F
0041:  MOVWF  19
0042:  MOVF   32,W
0043:  BSF    03.6
0044:  MOVWF  0D
0045:  BCF    03.6
0046:  MOVF   33,W
0047:  BSF    03.6
0048:  MOVWF  0F
0049:  BCF    03.6
004A:  MOVF   0B,W
004B:  MOVWF  34
004C:  BCF    0B.7
004D:  BSF    03.5
004E:  BSF    03.6
004F:  BSF    0C.7
0050:  BSF    0C.0
0051:  NOP
0052:  NOP
0053:  BCF    03.5
0054:  BCF    03.6
0055:  BTFSC  34.7
0056:  BSF    0B.7
0057:  BSF    03.6
0058:  RLF    0C,W
0059:  RLF    0E,W
005A:  ANDLW  7F
005B:  BTFSC  03.2
005C:  GOTO   078
005D:  BCF    03.6
005E:  MOVWF  31
005F:  BSF    03.6
0060:  MOVF   0D,W
0061:  BCF    03.6
0062:  MOVWF  32
0063:  BSF    03.6
0064:  MOVF   0F,W
0065:  BCF    03.6
0066:  MOVWF  33
0067:  MOVF   31,W
0068:  BTFSS  0C.4
0069:  GOTO   068
006A:  MOVWF  19
006B:  MOVF   32,W
006C:  BSF    03.6
006D:  MOVWF  0D
006E:  BCF    03.6
006F:  MOVF   33,W
0070:  BSF    03.6
0071:  MOVWF  0F
0072:  INCF   0D,F
0073:  BTFSC  03.2
0074:  INCF   0F,F
0075:  BCF    03.6
0076:  GOTO   022
0077:  BSF    03.6
0078:  BCF    03.6
0079:  BCF    0A.3
007A:  BCF    0A.4
007B:  GOTO   1B4 (RETURN)
*
011C:  MOVF   0B,W
011D:  MOVWF  32
011E:  BCF    0B.7
011F:  BSF    03.5
0120:  BSF    03.6
0121:  BSF    0C.7
0122:  BSF    0C.0
0123:  NOP
0124:  NOP
0125:  BCF    03.5
0126:  BCF    03.6
0127:  BTFSC  32.7
0128:  BSF    0B.7
0129:  BTFSC  03.0
012A:  GOTO   154
012B:  BSF    03.6
012C:  MOVF   0C,W
012D:  ANDLW  7F
012E:  BCF    03.6
012F:  MOVWF  32
0130:  BSF    03.6
0131:  MOVF   0D,W
0132:  BCF    03.6
0133:  MOVWF  33
0134:  BSF    03.6
0135:  MOVF   0F,W
0136:  BCF    03.6
0137:  MOVWF  34
0138:  MOVF   32,W
0139:  BTFSS  0C.4
013A:  GOTO   139
013B:  MOVWF  19
013C:  MOVF   33,W
013D:  BSF    03.6
013E:  MOVWF  0D
013F:  BCF    03.6
0140:  MOVF   34,W
0141:  BSF    03.6
0142:  MOVWF  0F
0143:  BCF    03.6
0144:  MOVF   0B,W
0145:  MOVWF  35
0146:  BCF    0B.7
0147:  BSF    03.5
0148:  BSF    03.6
0149:  BSF    0C.7
014A:  BSF    0C.0
014B:  NOP
014C:  NOP
014D:  BCF    03.5
014E:  BCF    03.6
014F:  BTFSC  35.7
0150:  BSF    0B.7
0151:  DECFSZ 31,F
0152:  GOTO   154
0153:  GOTO   174
0154:  BSF    03.6
0155:  RLF    0C,W
0156:  RLF    0E,W
0157:  ANDLW  7F
0158:  BCF    03.6
0159:  MOVWF  32
015A:  BSF    03.6
015B:  MOVF   0D,W
015C:  BCF    03.6
015D:  MOVWF  33
015E:  BSF    03.6
015F:  MOVF   0F,W
0160:  BCF    03.6
0161:  MOVWF  34
0162:  MOVF   32,W
0163:  BTFSS  0C.4
0164:  GOTO   163
0165:  MOVWF  19
0166:  MOVF   33,W
0167:  BSF    03.6
0168:  MOVWF  0D
0169:  BCF    03.6
016A:  MOVF   34,W
016B:  BSF    03.6
016C:  MOVWF  0F
016D:  INCF   0D,F
016E:  BTFSC  03.2
016F:  INCF   0F,F
0170:  BCF    03.0
0171:  BCF    03.6
0172:  DECFSZ 31,F
0173:  GOTO   11C
0174:  BCF    0A.3
0175:  BCF    0A.4
0176:  GOTO   1C4 (RETURN)
....................  
.................... #list 
....................  
.................... //#include <stdio.h> 
.................... //#include <hc595\hc595.h>            // Su dung IC74HC595 
.................... //#include <key_4x4\key_4x4.h>         // Su dung KEY PAD 4X4 
.................... //#include <lcd\lcd.h>               // Su dung LCD 16x2 
.................... //#include <ds1307\ds1307.h>         // Su dung DS1307 
.................... /**************KHAI BAO CAU HINH FUSE BIT************/ 
.................... /////////////////////////////////////////////////////// 
.................... //                                                   // 
.................... // Voi moi muc phai chon mot trong danh sach dua ra  // 
.................... //                                                   // 
.................... /////////////////////////////////////////////////////// 
....................  
.................... //_________________POINTER AND ADC____________________ 
....................  
.................... //#device *=16 adc=10          //   su dung con tro 16 bit, bo chuyen doi ADC 10 bit 
.................... #device *=16 adc=8          //  su dung con tro 16 bit, bo chuyen doi ADC 8 bit 
....................  
.................... //__________________WATCH DOG TIMER___________________ 
....................  
.................... #FUSES NOWDT                   //   khong su dung bo Watch Dog Timer 
....................  
.................... //__________________HIGH SPEED OSC____________________ 
....................  
.................... //#FUSES LP                        // Su dung nguon dao dong tan so thap < 200 khz 
.................... //#FUSES XT                        // Dao dong thach anh <= 4mhz voi PCM/PCH , 3mhz to 10 mhz voi PCD 
.................... //#FUSES RC                        // Dao dong RC voi CLKOUT 
.................... #FUSES HS                      //Dao dong tan so cao (> 4mhz voi PCM/PCH) (>10mhz voi PCD) 
....................  
.................... //__________________POWER UP TIMER____________________ 
....................  
.................... #FUSES NOPUT                    //Khong su dung Power Up Timer 
.................... //#FUSES PUT                        //Su dung Power Up Timer 
.................... //__________________BROWN OUT_________________________ 
....................  
.................... #FUSES NOBROWNOUT               //Khong reset chip khi BrownOut 
.................... //#FUSES BROWNOUT                   //Reset chi khi co BrownOut 
.................... //______________LOW VOLTAGE PROGRAM___________________ 
....................  
.................... #FUSES NOLVP                    //No low voltage programing, B3(PIC16) or B5(PIC18) used for I/O 
.................... //#FUSES LVP                        //Low Voltage Programming on B3(PIC16) or B5(PIC18) 
.................... //______________CODE PROTECED EEPROM__________________ 
....................  
.................... #FUSES NOCPD                    //Khong bao ve du lieu EEPROM 
.................... //#FUSES CPD                        //Dung che do bao ve du lieu EEPROM 
....................  
.................... //_____________PROGRAM WRITE PROTECED_________________ 
....................  
.................... //#FUSES WRT                      //Program Memory Write Protected 
.................... //#FUSES WRT_50%                  //Lower half of Program Memory is Write Protected 
.................... //#FUSES WRT_5%                   //Lower 255 bytes of Program Memory is Write Protected 
.................... #FUSES NOWRT                    //Program memory not write protected 
....................  
.................... //_____________ENABLE DEBUG MODE FOR ICD______________ 
....................  
.................... //#device ICD=TRUE            // Kich hoat chuc nang DEBUG ICD Integrated Chip Debugging 
.................... //________________DEBUG FOR ICD_______________________ 
....................  
.................... #FUSES NODEBUG                  //Khong su dung che do Debug voi ICD 
.................... //#FUSES DEBUG                      // Su dung che do Debug voi ICD 
....................  
.................... //___________CODE PROTECED FROM READING_______________ 
.................... #FUSES NOPROTECT                // Cho phep doc lai Code 
.................... //#FUSES PROTECT                    // Khong cho phep doc lai code  
....................  
.................... //___________________CLOCK____________________________ 
....................  
.................... #use delay(clock=24000000)            // Su dung tan so 20Mhz, khong reset watch dog khi goi den ham delay. 
*
0099:  MOVLW  32
009A:  MOVWF  04
009B:  BCF    03.7
009C:  MOVF   00,W
009D:  BTFSC  03.2
009E:  GOTO   0AD
009F:  MOVLW  07
00A0:  MOVWF  78
00A1:  CLRF   77
00A2:  DECFSZ 77,F
00A3:  GOTO   0A2
00A4:  DECFSZ 78,F
00A5:  GOTO   0A1
00A6:  MOVLW  C7
00A7:  MOVWF  77
00A8:  DECFSZ 77,F
00A9:  GOTO   0A8
00AA:  NOP
00AB:  DECFSZ 00,F
00AC:  GOTO   09F
00AD:  RETURN
.................... //#use delay(clock=20000000,RESTART_WDT)   // Su dung tan so 20Mhz, reset watch dog khi goi den ham delay. 
....................  
.................... //________________FAST_STANDAR I/O PORTA___________________ 
....................  
.................... #use FAST_IO(A)          // Thiet lap che do fast I/O cho PORTA, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... //#use STANDARD_IO(A)     // Thiet lap che do chuan I/O cho PORTA, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(A)       // 
....................  
.................... //________________FAST_STANDAR I/O PORTB___________________ 
....................  
.................... #use FAST_IO(B)          // Thiet lap che do fast I/O cho PORTB, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... //#use STANDARD_IO(B)     // Thiet lap che do chuan I/O cho PORTB, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(B)       // 
....................  
.................... //________________FAST_STANDAR I/O PORTC____________________ 
....................  
.................... #use FAST_IO(C)          // Thiet lap che do fast I/O cho PORTC, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... //#use STANDARD_IO(C)     // Thiet lap che do chuan I/O cho PORTC, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(C)       // 
....................  
.................... //________________FAST_STANDAR I/O PORTD_____________________ 
....................  
.................... #use FAST_IO(D)          // Thiet lap che do fast I/O cho PORTD, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... //#use STANDARD_IO(D)     // Thiet lap che do chuan I/O cho PORTD, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(D)       // 
....................  
.................... //_______________FAST_STANDAR I/O PORTE___________________ 
....................  
.................... #use FAST_IO(E)        // Thiet lap che do fast I/O cho PORTE, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... //#use STANDARD_IO(E)     // Thiet lap che do chuan I/O cho PORTE, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(E)       // 
....................  
.................... //___________________GIAO TIEP I2C________________________ 
....................  
....................  
.................... //#define I2C_DATA   PIN_C4 
.................... //#define I2C_CLK   PIN_C3 
.................... //#use i2c(Master,Fast,sda=I2C_DATA,scl=I2C_CLK) 
.................... //#use i2c(Master,Fast,sda=I2C_DATA,scl=I2C_CLK,restart_wdt) 
.................... //#use i2c(Master,Fast,sda=I2C_DATA,scl=I2C_CLK,force_hw) 
.................... //#use i2c(Master,Fast,sda=I2C_DATA,scl=I2C_CLK,restart_wdt,force_hw) 
.................... //#use i2c(Master,Slow,sda=I2C_DATA,scl=I2C_CLK) 
.................... //#use i2c(Master,Slow,sda=I2C_DATA,scl=I2C_CLK,restart_wdt) 
.................... //#use i2c(Master,Slow,sda=I2C_DATA,scl=I2C_CLK,force_hw) 
.................... //#use i2c(Master,Slow,sda=I2C_DATA,scl=I2C_CLK,restart_wdt,force_hw) 
.................... //#use i2c(Slave,Fast,sda=I2C_DATA,scl=I2C_CLK,address=0x) 
.................... //#use i2c(Slave,Fast,sda=I2C_DATA,scl=I2C_CLK,restart_wdt,address=0x) 
.................... //#use i2c(Slave,Fast,sda=I2C_DATA,scl=I2C_CLK,force_hw,address=0x) 
.................... //#use i2c(Slave,Fast,sda=I2C_DATA,scl=I2C_CLK,restart_wdt,force_hw,address=0x) 
.................... //#use i2c(Slave,Slow,sda=I2C_DATA,scl=I2C_CLK,address=0x) 
.................... //#use i2c(Slave,Slow,sda=I2C_DATA,scl=I2C_CLK,restart_wdt,address=0x) 
.................... //#use i2c(Slave,Slow,sda=I2C_DATA,scl=I2C_CLK,force_hw,address=0x) 
.................... //#use i2c(Slave,Slow,sda=I2C_DATA,scl=I2C_CLK,restart_wdt,force_hw,address=0x) 
....................  
.................... //________________________CASE_____________________________ 
....................  
....................  
.................... //#CASE               // Phan biet chu hoa va chu thuong trong khi lap trinh code 
....................  
....................  
.................... /************** DINH NGHIA CAC CHAN I/O ************/ 
....................  
.................... //////////////////////////////////////////////////////// 
.................... //   Xoa chu thich cho cac chuc nang I/O su dung       // 
.................... //  Dinh nghia lai cac chan cho phu hop voi phan cung //  
.................... //////////////////////////////////////////////////////// 
....................  
.................... //______________________I/O LCD____________________________ 
.................... /*#define LCD_RS PIN_E0                         
.................... #define LCD_RW PIN_E1 
.................... #define LCD_EN PIN_E2 
.................... #define LCD_D4 PIN_D4                  
.................... #define LCD_D5 PIN_D5 
.................... #define LCD_D6 PIN_D6 
.................... #define LCD_D7 PIN_D7 */ 
.................... //_____________________I/O HC595___________________________ 
.................... #define HC595_LATCH_BIT    PIN_C3 
.................... #define HC595_LATCH_FRAME  PIN_C4  
.................... #define HC595_DATA         PIN_C5  
.................... //____________________I/O DS1307___________________________ 
.................... //__________________I/O KEY PAD 4x4________________________ 
....................    #define ROW1   PIN_D0 
....................    #define ROW2   PIN_D1 
....................    #define ROW3   PIN_D2 
....................    #define ROW4   PIN_D3 
....................    #define COL1   PIN_D4 
....................    #define COL2   PIN_D5 
....................    #define COL3   PIN_D6 
....................    #define COL4   PIN_D7 
.................... //____________________OTHER________________________________ 
....................  
.................... #endif 
....................  
....................  
.................... #include <uart.c> 
.................... #ifndef __UART_ 
.................... #define __UART_ 
.................... void UART_config() 
.................... { 
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=PORT1) 
*
001F:  BCF    0A.3
0020:  BCF    0A.4
0021:  GOTO   1AD (RETURN)
.................... //#use rs232(baud=9600,parity=E,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=PORT1) 
.................... //#use rs232(baud=9600,parity=O,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=PORT1) 
....................  
.................... } 
.................... #endif 
....................  
.................... #include <key_4x4.c> 
.................... #ifndef __KEY_4X4_ 
.................... #define __KEY_4X4_ 
.................... static unsigned char KEY_4X4[4][4]={'7','8','9','/', 
....................                                     '4','5','6','*', 
....................                                     '1','2','3','-', 
....................                                     '#','0','=','+'}; 
*
018A:  MOVLW  37
018B:  BCF    03.5
018C:  MOVWF  20
018D:  MOVLW  38
018E:  MOVWF  21
018F:  MOVLW  39
0190:  MOVWF  22
0191:  MOVLW  2F
0192:  MOVWF  23
0193:  MOVLW  34
0194:  MOVWF  24
0195:  MOVLW  35
0196:  MOVWF  25
0197:  MOVLW  36
0198:  MOVWF  26
0199:  MOVLW  2A
019A:  MOVWF  27
019B:  MOVLW  31
019C:  MOVWF  28
019D:  MOVLW  32
019E:  MOVWF  29
019F:  MOVLW  33
01A0:  MOVWF  2A
01A1:  MOVLW  2D
01A2:  MOVWF  2B
01A3:  MOVLW  23
01A4:  MOVWF  2C
01A5:  MOVLW  30
01A6:  MOVWF  2D
01A7:  MOVLW  3D
01A8:  MOVWF  2E
01A9:  MOVLW  2B
01AA:  MOVWF  2F
.................... void key_4x4_init(void) 
.................... { 
....................    output_drive(ROW1); 
*
0012:  BSF    03.5
0013:  BCF    08.0
....................    output_drive(ROW2); 
0014:  BCF    08.1
....................    output_drive(ROW3); 
0015:  BCF    08.2
....................    output_drive(ROW4); 
0016:  BCF    08.3
....................    output_float(COL1); 
0017:  BSF    08.4
....................    output_float(COL2); 
0018:  BSF    08.5
....................    output_float(COL3); 
0019:  BSF    08.6
....................    output_float(COL4); 
001A:  BSF    08.7
001B:  BCF    03.5
001C:  BCF    0A.3
001D:  BCF    0A.4
001E:  GOTO   1AC (RETURN)
.................... } 
.................... int1 ButtonIsPush(void) 
.................... { 
....................    output_low(ROW1); 
*
007C:  BCF    08.0
....................    output_low(ROW2); 
007D:  BCF    08.1
....................    output_low(ROW3); 
007E:  BCF    08.2
....................    output_low(ROW4); 
007F:  BCF    08.3
....................    if((input(COL1)==0)|(input(COL2)==0)|(input(COL3)==0)|(input(COL4)==0)) 
0080:  MOVLW  00
0081:  BTFSS  08.4
0082:  MOVLW  01
0083:  MOVWF  33
0084:  MOVLW  00
0085:  BTFSS  08.5
0086:  MOVLW  01
0087:  IORWF  33,F
0088:  MOVLW  00
0089:  BTFSS  08.6
008A:  MOVLW  01
008B:  IORWF  33,F
008C:  MOVLW  00
008D:  BTFSS  08.7
008E:  MOVLW  01
008F:  IORWF  33,W
0090:  BTFSC  03.2
0091:  GOTO   096
....................    return 1; 
0092:  MOVLW  01
0093:  MOVWF  78
0094:  GOTO   098
0095:  GOTO   098
....................    else  
....................    return 0; 
0096:  MOVLW  00
0097:  MOVWF  78
0098:  RETURN
.................... } 
.................... void check_row(unsigned char i) 
.................... { 
....................    output_high(ROW1); 
*
00C0:  BSF    08.0
....................    output_high(ROW2); 
00C1:  BSF    08.1
....................    output_high(ROW3); 
00C2:  BSF    08.2
....................    output_high(ROW4); 
00C3:  BSF    08.3
....................    if(i==0) 
00C4:  MOVF   32,F
00C5:  BTFSS  03.2
00C6:  GOTO   0C9
....................    { 
....................       output_low(ROW1); 
00C7:  BCF    08.0
....................    } 
00C8:  GOTO   0D4
....................    else if(i==1) 
00C9:  DECFSZ 32,W
00CA:  GOTO   0CD
....................    { 
....................       output_low(ROW2); 
00CB:  BCF    08.1
....................    } 
00CC:  GOTO   0D4
....................    else if(i==2) 
00CD:  MOVF   32,W
00CE:  SUBLW  02
00CF:  BTFSS  03.2
00D0:  GOTO   0D3
....................    { 
....................       output_low(ROW3); 
00D1:  BCF    08.2
....................    } 
00D2:  GOTO   0D4
....................    else 
....................    { 
....................       output_low(ROW4); 
00D3:  BCF    08.3
....................    } 
.................... } 
.................... unsigned char get_key_4x4() 
.................... { 
....................    unsigned char i; 
....................    if(ButtonIsPush()) 
*
00AE:  CALL   07C
00AF:  MOVF   78,F
00B0:  BTFSC  03.2
00B1:  GOTO   119
....................    { 
....................       delay_ms(5); 
00B2:  MOVLW  05
00B3:  MOVWF  32
00B4:  CALL   099
....................       if(ButtonIsPush()) 
00B5:  CALL   07C
00B6:  MOVF   78,F
00B7:  BTFSC  03.2
00B8:  GOTO   119
....................       {          
....................          for(i=0;i<4;i++) 
00B9:  CLRF   31
00BA:  MOVF   31,W
00BB:  SUBLW  03
00BC:  BTFSS  03.0
00BD:  GOTO   119
....................          {             
....................             check_row(i); 
00BE:  MOVF   31,W
00BF:  MOVWF  32
....................             if(!input(COL1)) return KEY_4X4[3-i][0]; 
*
00D4:  BTFSC  08.4
00D5:  GOTO   0E4
00D6:  MOVF   31,W
00D7:  SUBLW  03
00D8:  MOVWF  77
00D9:  RLF    77,F
00DA:  RLF    77,F
00DB:  MOVLW  FC
00DC:  ANDWF  77,F
00DD:  MOVF   77,W
00DE:  ADDLW  20
00DF:  MOVWF  04
00E0:  BCF    03.7
00E1:  MOVF   00,W
00E2:  MOVWF  78
00E3:  GOTO   11B
....................             if(!input(COL2)) return KEY_4X4[3-i][1]; 
00E4:  BTFSC  08.5
00E5:  GOTO   0F5
00E6:  MOVF   31,W
00E7:  SUBLW  03
00E8:  MOVWF  77
00E9:  RLF    77,F
00EA:  RLF    77,F
00EB:  MOVLW  FC
00EC:  ANDWF  77,F
00ED:  MOVF   77,W
00EE:  ADDLW  01
00EF:  ADDLW  20
00F0:  MOVWF  04
00F1:  BCF    03.7
00F2:  MOVF   00,W
00F3:  MOVWF  78
00F4:  GOTO   11B
....................             if(!input(COL3)) return KEY_4X4[3-i][2]; 
00F5:  BTFSC  08.6
00F6:  GOTO   106
00F7:  MOVF   31,W
00F8:  SUBLW  03
00F9:  MOVWF  77
00FA:  RLF    77,F
00FB:  RLF    77,F
00FC:  MOVLW  FC
00FD:  ANDWF  77,F
00FE:  MOVF   77,W
00FF:  ADDLW  02
0100:  ADDLW  20
0101:  MOVWF  04
0102:  BCF    03.7
0103:  MOVF   00,W
0104:  MOVWF  78
0105:  GOTO   11B
....................             if(!input(COL4)) return KEY_4X4[3-i][3]; 
0106:  BTFSC  08.7
0107:  GOTO   117
0108:  MOVF   31,W
0109:  SUBLW  03
010A:  MOVWF  77
010B:  RLF    77,F
010C:  RLF    77,F
010D:  MOVLW  FC
010E:  ANDWF  77,F
010F:  MOVF   77,W
0110:  ADDLW  03
0111:  ADDLW  20
0112:  MOVWF  04
0113:  BCF    03.7
0114:  MOVF   00,W
0115:  MOVWF  78
0116:  GOTO   11B
0117:  INCF   31,F
0118:  GOTO   0BA
....................          }       
....................       } 
....................    } 
....................    return 0; 
0119:  MOVLW  00
011A:  MOVWF  78
011B:  RETURN
.................... } 
.................... #endif 
....................  
.................... #include <var.h> 
.................... #ifndef _VAR_ 
.................... #define _VAR_ 
....................    //const unsigned char  chu_so[10] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90}; 
....................    //gia tri tren led 7 thanh          0  1     2    3     4    5   6     7   8    9 
....................    //const unsigned char OFF_LED=0xff; 
....................    //unsigned char buffer[3]; 
.................... #endif                                           
....................  
....................  
.................... void main() 
*
0177:  MOVF   03,W
0178:  ANDLW  1F
0179:  MOVWF  03
017A:  MOVLW  26
017B:  BSF    03.5
017C:  MOVWF  19
017D:  MOVLW  A2
017E:  MOVWF  18
017F:  MOVLW  90
0180:  BCF    03.5
0181:  MOVWF  18
0182:  BSF    03.5
0183:  BSF    1F.0
0184:  BSF    1F.1
0185:  BSF    1F.2
0186:  BCF    1F.3
0187:  MOVLW  07
0188:  MOVWF  1C
0189:  BCF    03.7
.................... { 
....................    unsigned int8 key; 
....................    key_4x4_init(); 
*
01AB:  GOTO   012
....................    UART_config(); 
01AC:  GOTO   01F
....................    printf("KEY 4X4 \n"); 
01AD:  MOVLW  04
01AE:  BSF    03.6
01AF:  MOVWF  0D
01B0:  MOVLW  00
01B1:  MOVWF  0F
01B2:  BCF    03.6
01B3:  GOTO   022
....................    while(TRUE) 
....................    { 
....................       key = get_key_4x4(); 
01B4:  CALL   0AE
01B5:  MOVF   78,W
01B6:  MOVWF  30
....................       if(key) 
01B7:  MOVF   30,F
01B8:  BTFSC  03.2
01B9:  GOTO   1D7
....................       { 
....................          printf("Nut da nhan: %c \n",key); 
01BA:  MOVLW  09
01BB:  BSF    03.6
01BC:  MOVWF  0D
01BD:  MOVLW  00
01BE:  MOVWF  0F
01BF:  BCF    03.0
01C0:  MOVLW  0D
01C1:  BCF    03.6
01C2:  MOVWF  31
01C3:  GOTO   11C
01C4:  MOVF   30,W
01C5:  BTFSS  0C.4
01C6:  GOTO   1C5
01C7:  MOVWF  19
01C8:  MOVLW  20
01C9:  BTFSS  0C.4
01CA:  GOTO   1C9
01CB:  MOVWF  19
01CC:  MOVLW  0A
01CD:  BTFSS  0C.4
01CE:  GOTO   1CD
01CF:  MOVWF  19
....................          while(key) key = get_key_4x4(); 
01D0:  MOVF   30,F
01D1:  BTFSC  03.2
01D2:  GOTO   1D7
01D3:  CALL   0AE
01D4:  MOVF   78,W
01D5:  MOVWF  30
01D6:  GOTO   1D0
....................       } 
....................       delay_ms(100); 
01D7:  MOVLW  64
01D8:  MOVWF  32
01D9:  CALL   099
01DA:  GOTO   1B4
....................    } 
....................  
.................... } 
01DB:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
