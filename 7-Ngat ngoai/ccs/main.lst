CCS PCM C Compiler, Version 5.015, 5967               24-Apr-22 09:58

               Filename:   D:\STUDY\PIC\7-Ngat ngoai\ccs\main.lst

               ROM used:   766 words (9%)
                           Largest free fragment is 2048
               RAM used:   41 (11%) at main() level
                           54 (15%) worst case
               Stack used: 7 locations (3 in main + 4 for interrupts)
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   29F
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.4
0028:  GOTO   02B
0029:  BTFSC  0B.1
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   0AC
.................... #include <main.h> 
.................... /** 
....................   ****************************************************************************** 
....................   * Ten Tep      :        main.h 
....................   * Tac Gia      :        Nguyen Quy Nhat 
....................   * Cong Ty      :        MinhHaGroup 
....................   * Website      :        BanLinhKien.Vn 
....................   * Phien Ban    :        V1.0.0 
....................   * Ngay         :        31-08-2012 
....................   * Tom Tat      :        Khai bao cac thu vien. 
....................   *                       Cau hinh mot so chuc nang cho trinh bien dich. 
....................   *                       Cau hinh mot so chuc nang cho CHIP. 
....................   *                       Dinh nghia I/O. 
....................   *            
....................   * 
....................   ****************************************************************************** 
....................   * Chu Y      :           
....................   *                           
....................   *                       
....................   ****************************************************************************** 
....................   */ 
.................... #ifndef _MAIN_ 
.................... #define _MAIN_ 
.................... /***************KHAI BAO CAC THU VIEN*****************/    
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
00B2:  DATA D4,22
00B3:  DATA 53,2A
00B4:  DATA 20,27
00B5:  DATA C7,20
00B6:  DATA 54,10
00B7:  DATA CE,23
00B8:  DATA CF,20
00B9:  DATA 49,00
00BA:  DATA 20,22
00BB:  DATA E5,36
00BC:  DATA 3A,10
00BD:  DATA 25,19
00BE:  DATA 64,00
*
0126:  MOVF   2E,W
0127:  MOVWF  04
0128:  BCF    03.7
0129:  BTFSC  2F.0
012A:  BSF    03.7
012B:  MOVF   4A,W
012C:  MOVWF  00
012D:  INCF   04,F
012E:  CLRF   00
012F:  INCF   2E,F
0130:  BTFSC  03.2
0131:  INCF   2F,F
0132:  RETURN
0133:  MOVF   0B,W
0134:  MOVWF  44
0135:  BCF    0B.7
0136:  BSF    03.5
0137:  BSF    03.6
0138:  BSF    0C.7
0139:  BSF    0C.0
013A:  NOP
013B:  NOP
013C:  BCF    03.5
013D:  BCF    03.6
013E:  BTFSC  44.7
013F:  BSF    0B.7
0140:  BSF    03.6
0141:  MOVF   0C,W
0142:  ANDLW  7F
0143:  BTFSC  03.2
0144:  GOTO   187
0145:  BCF    03.6
0146:  MOVWF  44
0147:  BSF    03.6
0148:  MOVF   0D,W
0149:  BCF    03.6
014A:  MOVWF  45
014B:  BSF    03.6
014C:  MOVF   0F,W
014D:  BCF    03.6
014E:  MOVWF  46
014F:  MOVF   44,W
0150:  MOVWF  4A
0151:  CALL   126
0152:  MOVF   45,W
0153:  BSF    03.6
0154:  MOVWF  0D
0155:  BCF    03.6
0156:  MOVF   46,W
0157:  BSF    03.6
0158:  MOVWF  0F
0159:  BCF    03.6
015A:  MOVF   0B,W
015B:  MOVWF  47
015C:  BCF    0B.7
015D:  BSF    03.5
015E:  BSF    03.6
015F:  BSF    0C.7
0160:  BSF    0C.0
0161:  NOP
0162:  NOP
0163:  BCF    03.5
0164:  BCF    03.6
0165:  BTFSC  47.7
0166:  BSF    0B.7
0167:  BSF    03.6
0168:  RLF    0C,W
0169:  RLF    0E,W
016A:  ANDLW  7F
016B:  BTFSC  03.2
016C:  GOTO   187
016D:  BCF    03.6
016E:  MOVWF  44
016F:  BSF    03.6
0170:  MOVF   0D,W
0171:  BCF    03.6
0172:  MOVWF  45
0173:  BSF    03.6
0174:  MOVF   0F,W
0175:  BCF    03.6
0176:  MOVWF  46
0177:  MOVF   44,W
0178:  MOVWF  4A
0179:  CALL   126
017A:  MOVF   45,W
017B:  BSF    03.6
017C:  MOVWF  0D
017D:  BCF    03.6
017E:  MOVF   46,W
017F:  BSF    03.6
0180:  MOVWF  0F
0181:  INCF   0D,F
0182:  BTFSC  03.2
0183:  INCF   0F,F
0184:  BCF    03.6
0185:  GOTO   133
0186:  BSF    03.6
0187:  BCF    03.6
0188:  BCF    0A.3
0189:  BCF    0A.4
018A:  GOTO   2BB (RETURN)
*
01D8:  MOVF   0B,W
01D9:  MOVWF  45
01DA:  BCF    0B.7
01DB:  BSF    03.5
01DC:  BSF    03.6
01DD:  BSF    0C.7
01DE:  BSF    0C.0
01DF:  NOP
01E0:  NOP
01E1:  BCF    03.5
01E2:  BCF    03.6
01E3:  BTFSC  45.7
01E4:  BSF    0B.7
01E5:  BTFSC  03.0
01E6:  GOTO   20F
01E7:  BSF    03.6
01E8:  MOVF   0C,W
01E9:  ANDLW  7F
01EA:  BCF    03.6
01EB:  MOVWF  45
01EC:  BSF    03.6
01ED:  MOVF   0D,W
01EE:  BCF    03.6
01EF:  MOVWF  46
01F0:  BSF    03.6
01F1:  MOVF   0F,W
01F2:  BCF    03.6
01F3:  MOVWF  47
01F4:  MOVF   45,W
01F5:  MOVWF  4A
01F6:  CALL   126
01F7:  MOVF   46,W
01F8:  BSF    03.6
01F9:  MOVWF  0D
01FA:  BCF    03.6
01FB:  MOVF   47,W
01FC:  BSF    03.6
01FD:  MOVWF  0F
01FE:  BCF    03.6
01FF:  MOVF   0B,W
0200:  MOVWF  48
0201:  BCF    0B.7
0202:  BSF    03.5
0203:  BSF    03.6
0204:  BSF    0C.7
0205:  BSF    0C.0
0206:  NOP
0207:  NOP
0208:  BCF    03.5
0209:  BCF    03.6
020A:  BTFSC  48.7
020B:  BSF    0B.7
020C:  DECFSZ 44,F
020D:  GOTO   20F
020E:  GOTO   22E
020F:  BSF    03.6
0210:  RLF    0C,W
0211:  RLF    0E,W
0212:  ANDLW  7F
0213:  BCF    03.6
0214:  MOVWF  45
0215:  BSF    03.6
0216:  MOVF   0D,W
0217:  BCF    03.6
0218:  MOVWF  46
0219:  BSF    03.6
021A:  MOVF   0F,W
021B:  BCF    03.6
021C:  MOVWF  47
021D:  MOVF   45,W
021E:  MOVWF  4A
021F:  CALL   126
0220:  MOVF   46,W
0221:  BSF    03.6
0222:  MOVWF  0D
0223:  BCF    03.6
0224:  MOVF   47,W
0225:  BSF    03.6
0226:  MOVWF  0F
0227:  INCF   0D,F
0228:  BTFSC  03.2
0229:  INCF   0F,F
022A:  BCF    03.0
022B:  BCF    03.6
022C:  DECFSZ 44,F
022D:  GOTO   1D8
022E:  BCF    0A.3
022F:  BCF    0A.4
0230:  GOTO   2E8 (RETURN)
0231:  MOVF   4B,W
0232:  CLRF   78
0233:  SUBWF  4A,W
0234:  BTFSC  03.0
0235:  GOTO   239
0236:  MOVF   4A,W
0237:  MOVWF  77
0238:  GOTO   245
0239:  CLRF   77
023A:  MOVLW  08
023B:  MOVWF  4C
023C:  RLF    4A,F
023D:  RLF    77,F
023E:  MOVF   4B,W
023F:  SUBWF  77,W
0240:  BTFSC  03.0
0241:  MOVWF  77
0242:  RLF    78,F
0243:  DECFSZ 4C,F
0244:  GOTO   23C
0245:  RETURN
0246:  MOVLW  20
0247:  BTFSS  45.4
0248:  MOVLW  30
0249:  MOVWF  46
024A:  MOVF   44,W
024B:  MOVWF  77
024C:  BTFSS  44.7
024D:  GOTO   256
024E:  COMF   77,F
024F:  INCF   77,F
0250:  MOVF   77,W
0251:  MOVWF  44
0252:  MOVLW  2D
0253:  MOVWF  46
0254:  BSF    45.7
0255:  BSF    45.0
0256:  MOVF   44,W
0257:  MOVWF  4A
0258:  MOVLW  64
0259:  MOVWF  4B
025A:  CALL   231
025B:  MOVF   77,W
025C:  MOVWF  44
025D:  MOVLW  30
025E:  ADDWF  78,W
025F:  MOVWF  47
0260:  MOVF   44,W
0261:  MOVWF  4A
0262:  MOVLW  0A
0263:  MOVWF  4B
0264:  CALL   231
0265:  MOVLW  30
0266:  ADDWF  77,W
0267:  MOVWF  49
0268:  MOVLW  30
0269:  ADDWF  78,W
026A:  MOVWF  48
026B:  MOVF   46,W
026C:  MOVWF  77
026D:  MOVLW  30
026E:  SUBWF  47,W
026F:  BTFSC  03.2
0270:  GOTO   275
0271:  BSF    45.1
0272:  BTFSC  45.7
0273:  BSF    45.2
0274:  GOTO   289
0275:  MOVF   46,W
0276:  MOVWF  47
0277:  MOVLW  20
0278:  MOVWF  46
0279:  MOVLW  30
027A:  SUBWF  48,W
027B:  BTFSC  03.2
027C:  GOTO   281
027D:  BSF    45.0
027E:  BTFSC  45.7
027F:  BSF    45.1
0280:  GOTO   289
0281:  BTFSS  03.2
0282:  BSF    45.0
0283:  BTFSS  03.2
0284:  GOTO   289
0285:  MOVF   47,W
0286:  MOVWF  48
0287:  MOVLW  20
0288:  MOVWF  47
0289:  BTFSC  45.2
028A:  GOTO   290
028B:  BTFSC  45.1
028C:  GOTO   293
028D:  BTFSC  45.0
028E:  GOTO   296
028F:  GOTO   299
0290:  MOVF   46,W
0291:  MOVWF  4A
0292:  CALL   126
0293:  MOVF   47,W
0294:  MOVWF  4A
0295:  CALL   126
0296:  MOVF   48,W
0297:  MOVWF  4A
0298:  CALL   126
0299:  MOVF   49,W
029A:  MOVWF  4A
029B:  CALL   126
029C:  BCF    0A.3
029D:  BCF    0A.4
029E:  GOTO   2ED (RETURN)
....................  
.................... #list 
....................  
.................... /**************KHAI BAO CAU HINH FUSE BIT************/ 
.................... /////////////////////////////////////////////////////// 
.................... //                                                   // 
.................... // Voi moi muc phai chon mot trong danh sach dua ra  // 
.................... //                                                   // 
.................... /////////////////////////////////////////////////////// 
....................  
.................... //_________________POINTER AND ADC____________________ 
....................  
.................... #device *=16 adc=10          //   su dung con tro 16 bit, bo chuyen doi ADC 10 bit 
.................... //#device *=16 adc=8          //  su dung con tro 16 bit, bo chuyen doi ADC 8 bit 
....................  
.................... //__________________WATCH DOG TIMER___________________ 
....................  
.................... #FUSES NOWDT                   //   khong su dung bo Watch Dog Timer 
....................  
.................... //__________________HIGH SPEED OSC____________________ 
....................  
.................... //#FUSES LP                        // Su dung nguon dao dong tan so thap < 200 khz 
.................... //#FUSES XT                        // Dao dong thach anh <= 4mhz voi PCM/PCH , 3mhz to 10 mhz voi PCD 
.................... //#FUSES RC                        // Dao dong RC voi CLKOUT 
.................... #FUSES HS                      //Dao dong tan so cao (> 4mhz voi PCM/PCH) (>10mhz voi PCD) 
....................  
.................... //__________________POWER UP TIMER____________________ 
....................  
.................... #FUSES NOPUT                    //Khong su dung Power Up Timer 
.................... //#FUSES PUT                        //Su dung Power Up Timer 
.................... //__________________BROWN OUT_________________________ 
....................  
.................... #FUSES NOBROWNOUT               //Khong reset chip khi BrownOut 
.................... //#FUSES BROWNOUT                   //Reset chi khi co BrownOut 
.................... //______________LOW VOLTAGE PROGRAM___________________ 
....................  
.................... #FUSES NOLVP                    //No low voltage programing, B3(PIC16) or B5(PIC18) used for I/O 
.................... //#FUSES LVP                        //Low Voltage Programming on B3(PIC16) or B5(PIC18) 
.................... //______________CODE PROTECED EEPROM__________________ 
....................  
.................... #FUSES NOCPD                    //Khong bao ve du lieu EEPROM 
.................... //#FUSES CPD                        //Dung che do bao ve du lieu EEPROM 
....................  
.................... //_____________PROGRAM WRITE PROTECED_________________ 
....................  
.................... //#FUSES WRT                      //Program Memory Write Protected 
.................... //#FUSES WRT_50%                  //Lower half of Program Memory is Write Protected 
.................... //#FUSES WRT_5%                   //Lower 255 bytes of Program Memory is Write Protected 
.................... #FUSES NOWRT                    //Program memory not write protected 
....................  
.................... //_____________ENABLE DEBUG MODE FOR ICD______________ 
....................  
.................... //#device ICD=TRUE            // Kich hoat chuc nang DEBUG ICD Integrated Chip Debugging 
.................... //________________DEBUG FOR ICD_______________________ 
....................  
.................... #FUSES NODEBUG                  //Khong su dung che do Debug voi ICD 
.................... //#FUSES DEBUG                      // Su dung che do Debug voi ICD 
....................  
.................... //___________CODE PROTECED FROM READING_______________ 
.................... #FUSES NOPROTECT                // Cho phep doc lai Code 
.................... //#FUSES PROTECT                    // Khong cho phep doc lai code  
....................  
.................... //___________________CLOCK____________________________ 
....................  
.................... #use delay(clock=24000000)            // Su dung tan so 20Mhz, khong reset watch dog khi goi den ham delay. 
*
0090:  MOVLW  4D
0091:  MOVWF  04
0092:  BCF    03.7
0093:  MOVF   00,W
0094:  BTFSC  03.2
0095:  GOTO   0A4
0096:  MOVLW  07
0097:  MOVWF  78
0098:  CLRF   77
0099:  DECFSZ 77,F
009A:  GOTO   099
009B:  DECFSZ 78,F
009C:  GOTO   098
009D:  MOVLW  C7
009E:  MOVWF  77
009F:  DECFSZ 77,F
00A0:  GOTO   09F
00A1:  NOP
00A2:  DECFSZ 00,F
00A3:  GOTO   096
00A4:  RETURN
.................... //#use delay(clock=20000000,RESTART_WDT)   // Su dung tan so 20Mhz, reset watch dog khi goi den ham delay. 
....................  
.................... //________________FAST_STANDAR I/O PORTA___________________ 
....................  
.................... //#use FAST_IO(A)          // Thiet lap che do fast I/O cho PORTA, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... #use STANDARD_IO(A)     // Thiet lap che do chuan I/O cho PORTA, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(A)       // 
....................  
.................... //________________FAST_STANDAR I/O PORTB___________________ 
....................  
.................... //#use FAST_IO(B)          // Thiet lap che do fast I/O cho PORTB, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... #use STANDARD_IO(B)     // Thiet lap che do chuan I/O cho PORTB, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(B)       // 
....................  
.................... //________________FAST_STANDAR I/O PORTC____________________ 
....................  
.................... //#use FAST_IO(C)          // Thiet lap che do fast I/O cho PORTC, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... #use STANDARD_IO(C)     // Thiet lap che do chuan I/O cho PORTC, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(C)       // 
....................  
.................... //________________FAST_STANDAR I/O PORTD_____________________ 
....................  
.................... #use FAST_IO(D)          // Thiet lap che do fast I/O cho PORTD, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... //#use STANDARD_IO(D)     // Thiet lap che do chuan I/O cho PORTD, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(D)       // 
....................  
.................... //_______________FAST_STANDAR I/O PORTE___________________ 
....................  
.................... #use FAST_IO(E)        // Thiet lap che do fast I/O cho PORTE, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... //#use STANDARD_IO(E)     // Thiet lap che do chuan I/O cho PORTE, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(E)       // 
....................  
....................  
.................... //________________________CASE_____________________________ 
....................  
....................  
.................... #CASE               // Phan biet chu hoa va chu thuong trong khi lap trinh code 
....................  
....................  
.................... /************** DINH NGHIA CAC CHAN I/O ************/ 
....................  
.................... //////////////////////////////////////////////////////// 
.................... //   Xoa chu thich cho cac chuc nang I/O su dung       // 
.................... //  Dinh nghia lai cac chan cho phu hop voi phan cung //  
.................... //////////////////////////////////////////////////////// 
....................  
.................... //______________________I/O LCD____________________________ 
.................... #define LCD_RS PIN_E0                         
.................... #define LCD_RW PIN_E1 
.................... #define LCD_EN PIN_E2 
.................... #define LCD_D4 PIN_D4                  
.................... #define LCD_D5 PIN_D5 
.................... #define LCD_D6 PIN_D6 
.................... #define LCD_D7 PIN_D7  
.................... #endif 
....................  
.................... #include <var.h> 
.................... #ifndef _VAR_ 
.................... #define _VAR_ 
.................... #endif                                           
....................  
.................... #include "lcd.c" 
.................... /** 
....................   ****************************************************************************** 
....................   * Ten Tep      :        lcd_16x2.c 
....................   * Tac Gia      :        Nguyen Quy Nhat 
....................   * Cong Ty      :         MinhHaGroup 
....................   *   Website    :         BanLinhKien.Vn 
....................   * Phien Ban   :         V1.0.0 
....................   * Ngay         :       31-07-2012 
....................   * Tom Tat   :     Dinh nghia cac ham dieu khien LCD 16x2. 
....................   *            
....................   * 
....................   ****************************************************************************** 
....................   * Chu Y      : 
....................   *                       
....................   ****************************************************************************** 
....................   */ 
.................... //Tao Xung 
....................  void LCD_Enable(void) 
.................... { 
....................  output_high(LCD_EN); 
*
0076:  BSF    09.2
....................  delay_us(3); 
0077:  MOVLW  05
0078:  MOVWF  77
0079:  DECFSZ 77,F
007A:  GOTO   079
007B:  GOTO   07C
....................  output_low(LCD_EN); 
007C:  BCF    09.2
....................  delay_us(50);  
007D:  MOVLW  63
007E:  MOVWF  77
007F:  DECFSZ 77,F
0080:  GOTO   07F
0081:  GOTO   082
0082:  RETURN
.................... } 
.................... //Ham Gui 4 Bit Du Lieu Ra LCD 
....................  void LCD_Send4Bit( unsigned char Data ) 
.................... { 
....................  output_bit(LCD_D4,Data&0x01); 
*
004F:  BTFSC  4F.0
0050:  GOTO   053
0051:  BCF    08.4
0052:  GOTO   054
0053:  BSF    08.4
....................  output_bit(LCD_D5,(Data>>1)&1); 
0054:  BCF    03.0
0055:  RRF    4F,W
0056:  ANDLW  01
0057:  BTFSS  03.2
0058:  GOTO   05B
0059:  BCF    08.5
005A:  GOTO   05C
005B:  BSF    08.5
....................  output_bit(LCD_D6,(Data>>2)&1); 
005C:  RRF    4F,W
005D:  MOVWF  77
005E:  RRF    77,F
005F:  MOVLW  3F
0060:  ANDWF  77,F
0061:  MOVF   77,W
0062:  ANDLW  01
0063:  BTFSS  03.2
0064:  GOTO   067
0065:  BCF    08.6
0066:  GOTO   068
0067:  BSF    08.6
....................  output_bit(LCD_D7,(Data>>3)&1); 
0068:  RRF    4F,W
0069:  MOVWF  77
006A:  RRF    77,F
006B:  RRF    77,F
006C:  MOVLW  1F
006D:  ANDWF  77,F
006E:  MOVF   77,W
006F:  ANDLW  01
0070:  BTFSS  03.2
0071:  GOTO   074
0072:  BCF    08.7
0073:  GOTO   075
0074:  BSF    08.7
0075:  RETURN
.................... } 
.................... // Ham Gui 1 Lenh Cho LCD 
....................  void LCD_SendCommand (unsigned char command ) 
.................... { 
.................... LCD_Send4Bit  ( command >>4 );/* Gui 4 bit cao */ 
*
0083:  SWAPF  4D,W
0084:  MOVWF  4E
0085:  MOVLW  0F
0086:  ANDWF  4E,F
0087:  MOVF   4E,W
0088:  MOVWF  4F
0089:  CALL   04F
.................... LCD_Enable () ; 
008A:  CALL   076
.................... LCD_Send4Bit  ( command  );      /* Gui 4 bit thap*/ 
008B:  MOVF   4D,W
008C:  MOVWF  4F
008D:  CALL   04F
.................... LCD_Enable () ; 
008E:  CALL   076
008F:  RETURN
.................... } 
.................... // Ham Khoi Tao LCD 
....................  void LCD_Init ( void ) 
.................... { 
.................... output_drive(LCD_D4); 
*
00BF:  BSF    03.5
00C0:  BCF    08.4
.................... output_drive(LCD_D5); 
00C1:  BCF    08.5
.................... output_drive(LCD_D6); 
00C2:  BCF    08.6
.................... output_drive(LCD_D7); 
00C3:  BCF    08.7
.................... output_drive(LCD_EN); 
00C4:  BCF    09.2
.................... output_drive(LCD_RS); 
00C5:  BCF    09.0
.................... output_drive(LCD_RW); 
00C6:  BCF    09.1
00C7:  BCF    03.5
00C8:  CLRF   2B
00C9:  BTFSC  0B.7
00CA:  BSF    2B.7
00CB:  BCF    0B.7
.................... LCD_Send4Bit(0x00); 
00CC:  CLRF   4F
00CD:  CALL   04F
00CE:  BTFSC  2B.7
00CF:  BSF    0B.7
00D0:  CLRF   2B
00D1:  BTFSC  0B.7
00D2:  BSF    2B.7
00D3:  BCF    0B.7
.................... delay_ms(20); 
00D4:  MOVLW  14
00D5:  MOVWF  4D
00D6:  CALL   090
00D7:  BTFSC  2B.7
00D8:  BSF    0B.7
.................... output_low(LCD_RS); 
00D9:  BCF    09.0
.................... output_low(LCD_RW); 
00DA:  BCF    09.1
00DB:  CLRF   2B
00DC:  BTFSC  0B.7
00DD:  BSF    2B.7
00DE:  BCF    0B.7
.................... LCD_Send4Bit(0x03); 
00DF:  MOVLW  03
00E0:  MOVWF  4F
00E1:  CALL   04F
00E2:  BTFSC  2B.7
00E3:  BSF    0B.7
.................... LCD_Enable(); 
00E4:  CALL   076
00E5:  CLRF   2B
00E6:  BTFSC  0B.7
00E7:  BSF    2B.7
00E8:  BCF    0B.7
.................... delay_ms(5); 
00E9:  MOVLW  05
00EA:  MOVWF  4D
00EB:  CALL   090
00EC:  BTFSC  2B.7
00ED:  BSF    0B.7
.................... LCD_Enable(); 
00EE:  CALL   076
.................... delay_us(100); 
00EF:  MOVLW  C7
00F0:  MOVWF  77
00F1:  DECFSZ 77,F
00F2:  GOTO   0F1
00F3:  GOTO   0F4
.................... LCD_Enable(); 
00F4:  CALL   076
00F5:  CLRF   2B
00F6:  BTFSC  0B.7
00F7:  BSF    2B.7
00F8:  BCF    0B.7
.................... LCD_Send4Bit(0x02); 
00F9:  MOVLW  02
00FA:  MOVWF  4F
00FB:  CALL   04F
00FC:  BTFSC  2B.7
00FD:  BSF    0B.7
.................... LCD_Enable(); 
00FE:  CALL   076
00FF:  CLRF   2B
0100:  BTFSC  0B.7
0101:  BSF    2B.7
0102:  BCF    0B.7
.................... LCD_SendCommand( 0x28 );      // giao thuc 4 bit, hien thi 2 hang, ki tu 5x8 
0103:  MOVLW  28
0104:  MOVWF  4D
0105:  CALL   083
0106:  BTFSC  2B.7
0107:  BSF    0B.7
0108:  CLRF   2B
0109:  BTFSC  0B.7
010A:  BSF    2B.7
010B:  BCF    0B.7
.................... LCD_SendCommand( 0x0c);    // cho phep hien thi man hinh 
010C:  MOVLW  0C
010D:  MOVWF  4D
010E:  CALL   083
010F:  BTFSC  2B.7
0110:  BSF    0B.7
0111:  CLRF   2B
0112:  BTFSC  0B.7
0113:  BSF    2B.7
0114:  BCF    0B.7
.................... LCD_SendCommand( 0x06 );      // tang ID, khong dich khung hinh 
0115:  MOVLW  06
0116:  MOVWF  4D
0117:  CALL   083
0118:  BTFSC  2B.7
0119:  BSF    0B.7
011A:  CLRF   2B
011B:  BTFSC  0B.7
011C:  BSF    2B.7
011D:  BCF    0B.7
.................... LCD_SendCommand( 0x01 ); // xoa toan bo khung hinh 
011E:  MOVLW  01
011F:  MOVWF  4D
0120:  CALL   083
0121:  BTFSC  2B.7
0122:  BSF    0B.7
0123:  BCF    0A.3
0124:  BCF    0A.4
0125:  GOTO   2B1 (RETURN)
.................... } 
.................... void LCD_Gotoxy(unsigned char x, unsigned char y) 
.................... { 
....................   unsigned char address; 
....................   if(!y) 
*
018B:  MOVF   45,F
018C:  BTFSS  03.2
018D:  GOTO   192
....................   address = (0x80+x); 
018E:  MOVLW  80
018F:  ADDWF  44,W
0190:  MOVWF  46
0191:  GOTO   195
....................   else 
....................   address = (0xC0+x); 
0192:  MOVLW  C0
0193:  ADDWF  44,W
0194:  MOVWF  46
....................   delay_us(1000); 
0195:  CLRF   2B
0196:  BTFSC  0B.7
0197:  BSF    2B.7
0198:  BCF    0B.7
0199:  MOVLW  01
019A:  MOVWF  4D
019B:  CALL   090
019C:  BTFSC  2B.7
019D:  BSF    0B.7
019E:  CLRF   2B
019F:  BTFSC  0B.7
01A0:  BSF    2B.7
01A1:  BCF    0B.7
....................   LCD_SendCommand(address); 
01A2:  MOVF   46,W
01A3:  MOVWF  4D
01A4:  CALL   083
01A5:  BTFSC  2B.7
01A6:  BSF    0B.7
01A7:  CLRF   2B
01A8:  BTFSC  0B.7
01A9:  BSF    2B.7
01AA:  BCF    0B.7
....................   delay_ms(10); 
01AB:  MOVLW  0A
01AC:  MOVWF  4D
01AD:  CALL   090
01AE:  BTFSC  2B.7
01AF:  BSF    0B.7
01B0:  BCF    0A.3
01B1:  BCF    0A.4
01B2:  GOTO   2BF (RETURN)
.................... } 
.................... // Ham Xoa Man Hinh LCD 
.................... void LCD_Clear() 
.................... { 
....................   LCD_SendCommand(0x01);   
*
00A5:  MOVLW  01
00A6:  MOVWF  4D
00A7:  CALL   083
....................   delay_ms(10); 
00A8:  MOVLW  0A
00A9:  MOVWF  4D
00AA:  CALL   090
00AB:  RETURN
.................... } 
.................... // Ham Gui 1 Ki Tu Len LCD 
....................  void LCD_PutChar ( unsigned char Data ) 
.................... { 
....................  output_high(LCD_RS); 
*
01C8:  BSF    09.0
01C9:  CLRF   2B
01CA:  BTFSC  0B.7
01CB:  BSF    2B.7
01CC:  BCF    0B.7
....................  LCD_SendCommand( Data ); 
01CD:  MOVF   47,W
01CE:  MOVWF  4D
01CF:  CALL   083
01D0:  BTFSC  2B.7
01D1:  BSF    0B.7
....................  output_low(LCD_RS); 
01D2:  BCF    09.0
.................... } 
.................... void LCD_Puts (char *s) 
.................... { 
....................    while (*s) 
*
01B3:  MOVF   45,W
01B4:  MOVWF  7A
01B5:  MOVF   44,W
01B6:  MOVWF  04
01B7:  BCF    03.7
01B8:  BTFSC  7A.0
01B9:  BSF    03.7
01BA:  MOVF   00,F
01BB:  BTFSC  03.2
01BC:  GOTO   1D7
....................    { 
....................       LCD_PutChar(*s); 
01BD:  MOVF   45,W
01BE:  MOVWF  7A
01BF:  MOVF   44,W
01C0:  MOVWF  04
01C1:  BCF    03.7
01C2:  BTFSC  7A.0
01C3:  BSF    03.7
01C4:  MOVF   00,W
01C5:  MOVWF  46
01C6:  MOVF   46,W
01C7:  MOVWF  47
....................       s++; 
*
01D3:  INCF   44,F
01D4:  BTFSC  03.2
01D5:  INCF   45,F
01D6:  GOTO   1B3
....................    } 
01D7:  RETURN
.................... } 
.................... void LCD_PutsDelay (char *s,unsigned int time) 
.................... { 
....................    while (*s) 
....................    { 
....................       LCD_PutChar(*s); 
....................       s++; 
....................       delay_ms(time); 
....................    }   
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... int8 i =0; 
.................... #INT_EXT 
.................... void ngat_ngoai(void) 
.................... {  
....................   i=0; 
*
00AC:  CLRF   2D
....................   LCD_Clear(); 
00AD:  CALL   0A5
00AE:  BCF    0B.1
00AF:  BCF    0A.3
00B0:  BCF    0A.4
00B1:  GOTO   02B
.................... } 
....................  
.................... void main() 
*
029F:  MOVF   03,W
02A0:  ANDLW  1F
02A1:  MOVWF  03
02A2:  MOVLW  FF
02A3:  MOVWF  2C
02A4:  CLRF   2D
02A5:  CLRF   2F
02A6:  CLRF   2E
02A7:  BSF    03.5
02A8:  BSF    1F.0
02A9:  BSF    1F.1
02AA:  BSF    1F.2
02AB:  BCF    1F.3
02AC:  MOVLW  07
02AD:  MOVWF  1C
02AE:  BCF    03.7
.................... { 
....................    unsigned char str[20]; 
....................    LCD_Init(); 
02AF:  BCF    03.5
02B0:  GOTO   0BF
....................    sprintf(str,"TEST NGAT NGOAI"); 
02B1:  CLRF   2F
02B2:  MOVLW  30
02B3:  MOVWF  2E
02B4:  MOVLW  B2
02B5:  BSF    03.6
02B6:  MOVWF  0D
02B7:  MOVLW  00
02B8:  MOVWF  0F
02B9:  BCF    03.6
02BA:  GOTO   133
....................    LCD_Gotoxy(1,0); 
02BB:  MOVLW  01
02BC:  MOVWF  44
02BD:  CLRF   45
02BE:  GOTO   18B
....................    LCD_Puts(str); 
02BF:  CLRF   45
02C0:  MOVLW  30
02C1:  MOVWF  44
02C2:  CALL   1B3
02C3:  CLRF   2B
02C4:  BTFSC  0B.7
02C5:  BSF    2B.7
02C6:  BCF    0B.7
....................    LCD_Clear(); 
02C7:  CALL   0A5
02C8:  BTFSC  2B.7
02C9:  BSF    0B.7
....................    enable_interrupts(GLOBAL); 
02CA:  MOVLW  C0
02CB:  IORWF  0B,F
....................    ext_int_edge(H_TO_L); 
02CC:  BSF    03.5
02CD:  BCF    01.6
....................    enable_interrupts(INT_EXT); 
02CE:  BCF    03.5
02CF:  BSF    0B.4
....................     
....................    while(TRUE) 
....................    { 
....................       while(i<100) 
02D0:  MOVF   2D,W
02D1:  SUBLW  63
02D2:  BTFSS  03.0
02D3:  GOTO   2FC
02D4:  CLRF   2B
02D5:  BTFSC  0B.7
02D6:  BSF    2B.7
02D7:  BCF    0B.7
....................       { 
....................          LCD_Clear(); 
02D8:  CALL   0A5
02D9:  BTFSC  2B.7
02DA:  BSF    0B.7
....................          sprintf(str," Dem: %2d",i); 
02DB:  CLRF   2F
02DC:  MOVLW  30
02DD:  MOVWF  2E
02DE:  MOVLW  BA
02DF:  BSF    03.6
02E0:  MOVWF  0D
02E1:  MOVLW  00
02E2:  MOVWF  0F
02E3:  BCF    03.0
02E4:  MOVLW  06
02E5:  BCF    03.6
02E6:  MOVWF  44
02E7:  GOTO   1D8
02E8:  MOVF   2D,W
02E9:  MOVWF  44
02EA:  MOVLW  11
02EB:  MOVWF  45
02EC:  GOTO   246
....................          LCD_Puts(str); 
02ED:  CLRF   45
02EE:  MOVLW  30
02EF:  MOVWF  44
02F0:  CALL   1B3
02F1:  CLRF   2B
02F2:  BTFSC  0B.7
02F3:  BSF    2B.7
02F4:  BCF    0B.7
....................          delay_ms(200); 
02F5:  MOVLW  C8
02F6:  MOVWF  4D
02F7:  CALL   090
02F8:  BTFSC  2B.7
02F9:  BSF    0B.7
....................          i++; 
02FA:  INCF   2D,F
02FB:  GOTO   2D0
....................       } 
02FC:  GOTO   2D0
....................    } 
....................  
.................... } 
02FD:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
