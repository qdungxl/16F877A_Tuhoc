CCS PCM C Compiler, Version 5.015, 5967               23-Apr-22 17:32

               Filename:   D:\STUDY\PIC\2-LCD16x2\ccs\main.lst

               ROM used:   521 words (6%)
                           Largest free fragment is 2048
               RAM used:   28 (8%) at main() level
                           37 (10%) worst case
               Stack used: 3 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1BF
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA C8,32
0005:  DATA 6C,36
0006:  DATA 6F,10
0007:  DATA C4,3A
0008:  DATA EE,33
0009:  DATA 00,00
*
00B0:  MOVF   20,W
00B1:  MOVWF  04
00B2:  BCF    03.7
00B3:  BTFSC  21.0
00B4:  BSF    03.7
00B5:  MOVF   3D,W
00B6:  MOVWF  00
00B7:  INCF   04,F
00B8:  CLRF   00
00B9:  INCF   20,F
00BA:  BTFSC  03.2
00BB:  INCF   21,F
00BC:  RETURN
00BD:  MOVF   0B,W
00BE:  MOVWF  37
00BF:  BCF    0B.7
00C0:  BSF    03.5
00C1:  BSF    03.6
00C2:  BSF    0C.7
00C3:  BSF    0C.0
00C4:  NOP
00C5:  NOP
00C6:  BCF    03.5
00C7:  BCF    03.6
00C8:  BTFSC  37.7
00C9:  BSF    0B.7
00CA:  BSF    03.6
00CB:  MOVF   0C,W
00CC:  ANDLW  7F
00CD:  BTFSC  03.2
00CE:  GOTO   111
00CF:  BCF    03.6
00D0:  MOVWF  37
00D1:  BSF    03.6
00D2:  MOVF   0D,W
00D3:  BCF    03.6
00D4:  MOVWF  38
00D5:  BSF    03.6
00D6:  MOVF   0F,W
00D7:  BCF    03.6
00D8:  MOVWF  39
00D9:  MOVF   37,W
00DA:  MOVWF  3D
00DB:  CALL   0B0
00DC:  MOVF   38,W
00DD:  BSF    03.6
00DE:  MOVWF  0D
00DF:  BCF    03.6
00E0:  MOVF   39,W
00E1:  BSF    03.6
00E2:  MOVWF  0F
00E3:  BCF    03.6
00E4:  MOVF   0B,W
00E5:  MOVWF  3A
00E6:  BCF    0B.7
00E7:  BSF    03.5
00E8:  BSF    03.6
00E9:  BSF    0C.7
00EA:  BSF    0C.0
00EB:  NOP
00EC:  NOP
00ED:  BCF    03.5
00EE:  BCF    03.6
00EF:  BTFSC  3A.7
00F0:  BSF    0B.7
00F1:  BSF    03.6
00F2:  RLF    0C,W
00F3:  RLF    0E,W
00F4:  ANDLW  7F
00F5:  BTFSC  03.2
00F6:  GOTO   111
00F7:  BCF    03.6
00F8:  MOVWF  37
00F9:  BSF    03.6
00FA:  MOVF   0D,W
00FB:  BCF    03.6
00FC:  MOVWF  38
00FD:  BSF    03.6
00FE:  MOVF   0F,W
00FF:  BCF    03.6
0100:  MOVWF  39
0101:  MOVF   37,W
0102:  MOVWF  3D
0103:  CALL   0B0
0104:  MOVF   38,W
0105:  BSF    03.6
0106:  MOVWF  0D
0107:  BCF    03.6
0108:  MOVF   39,W
0109:  BSF    03.6
010A:  MOVWF  0F
010B:  INCF   0D,F
010C:  BTFSC  03.2
010D:  INCF   0F,F
010E:  BCF    03.6
010F:  GOTO   0BD
0110:  BSF    03.6
0111:  BCF    03.6
0112:  BCF    0A.3
0113:  BCF    0A.4
0114:  GOTO   1D9 (RETURN)
*
0151:  MOVF   3E,W
0152:  CLRF   78
0153:  SUBWF  3D,W
0154:  BTFSC  03.0
0155:  GOTO   159
0156:  MOVF   3D,W
0157:  MOVWF  77
0158:  GOTO   165
0159:  CLRF   77
015A:  MOVLW  08
015B:  MOVWF  3F
015C:  RLF    3D,F
015D:  RLF    77,F
015E:  MOVF   3E,W
015F:  SUBWF  77,W
0160:  BTFSC  03.0
0161:  MOVWF  77
0162:  RLF    78,F
0163:  DECFSZ 3F,F
0164:  GOTO   15C
0165:  RETURN
0166:  MOVLW  20
0167:  BTFSS  38.4
0168:  MOVLW  30
0169:  MOVWF  39
016A:  MOVF   37,W
016B:  MOVWF  77
016C:  BTFSS  37.7
016D:  GOTO   176
016E:  COMF   77,F
016F:  INCF   77,F
0170:  MOVF   77,W
0171:  MOVWF  37
0172:  MOVLW  2D
0173:  MOVWF  39
0174:  BSF    38.7
0175:  BSF    38.0
0176:  MOVF   37,W
0177:  MOVWF  3D
0178:  MOVLW  64
0179:  MOVWF  3E
017A:  CALL   151
017B:  MOVF   77,W
017C:  MOVWF  37
017D:  MOVLW  30
017E:  ADDWF  78,W
017F:  MOVWF  3A
0180:  MOVF   37,W
0181:  MOVWF  3D
0182:  MOVLW  0A
0183:  MOVWF  3E
0184:  CALL   151
0185:  MOVLW  30
0186:  ADDWF  77,W
0187:  MOVWF  3C
0188:  MOVLW  30
0189:  ADDWF  78,W
018A:  MOVWF  3B
018B:  MOVF   39,W
018C:  MOVWF  77
018D:  MOVLW  30
018E:  SUBWF  3A,W
018F:  BTFSC  03.2
0190:  GOTO   195
0191:  BSF    38.1
0192:  BTFSC  38.7
0193:  BSF    38.2
0194:  GOTO   1A9
0195:  MOVF   39,W
0196:  MOVWF  3A
0197:  MOVLW  20
0198:  MOVWF  39
0199:  MOVLW  30
019A:  SUBWF  3B,W
019B:  BTFSC  03.2
019C:  GOTO   1A1
019D:  BSF    38.0
019E:  BTFSC  38.7
019F:  BSF    38.1
01A0:  GOTO   1A9
01A1:  BTFSS  03.2
01A2:  BSF    38.0
01A3:  BTFSS  03.2
01A4:  GOTO   1A9
01A5:  MOVF   3A,W
01A6:  MOVWF  3B
01A7:  MOVLW  20
01A8:  MOVWF  3A
01A9:  BTFSC  38.2
01AA:  GOTO   1B0
01AB:  BTFSC  38.1
01AC:  GOTO   1B3
01AD:  BTFSC  38.0
01AE:  GOTO   1B6
01AF:  GOTO   1B9
01B0:  MOVF   39,W
01B1:  MOVWF  3D
01B2:  CALL   0B0
01B3:  MOVF   3A,W
01B4:  MOVWF  3D
01B5:  CALL   0B0
01B6:  MOVF   3B,W
01B7:  MOVWF  3D
01B8:  CALL   0B0
01B9:  MOVF   3C,W
01BA:  MOVWF  3D
01BB:  CALL   0B0
01BC:  BCF    0A.3
01BD:  BCF    0A.4
01BE:  GOTO   1F5 (RETURN)
....................  
.................... #list 
....................  
.................... #device *=16 adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
003D:  MOVLW  3A
003E:  MOVWF  04
003F:  BCF    03.7
0040:  MOVF   00,W
0041:  BTFSC  03.2
0042:  GOTO   050
0043:  MOVLW  06
0044:  MOVWF  78
0045:  CLRF   77
0046:  DECFSZ 77,F
0047:  GOTO   046
0048:  DECFSZ 78,F
0049:  GOTO   045
004A:  MOVLW  7B
004B:  MOVWF  77
004C:  DECFSZ 77,F
004D:  GOTO   04C
004E:  DECFSZ 00,F
004F:  GOTO   043
0050:  RETURN
.................... #define LCD_RS PIN_E0                         
.................... #define LCD_RW PIN_E1 
.................... #define LCD_EN PIN_E2 
.................... #define LCD_D4 PIN_D4                  
.................... #define LCD_D5 PIN_D5 
.................... #define LCD_D6 PIN_D6 
.................... #define LCD_D7 PIN_D7  
....................  
....................  
....................  
.................... #include "lcd.c" 
.................... /** 
....................  
....................   ****************************************************************************** 
....................   * Chu Y        :   Phai dinh nghia cac chan su dung cho LCD vao ham main.h 
....................   *                       
....................   ****************************************************************************** 
....................   */ 
.................... //Tao Xung 
....................  void LCD_Enable(void) 
.................... { 
....................  output_high(LCD_EN); 
0051:  BSF    03.5
0052:  BCF    09.2
0053:  BCF    03.5
0054:  BSF    09.2
....................  delay_us(3); 
0055:  MOVLW  04
0056:  MOVWF  77
0057:  DECFSZ 77,F
0058:  GOTO   057
0059:  GOTO   05A
....................  output_low(LCD_EN); 
005A:  BSF    03.5
005B:  BCF    09.2
005C:  BCF    03.5
005D:  BCF    09.2
....................  delay_us(50);  
005E:  MOVLW  52
005F:  MOVWF  77
0060:  DECFSZ 77,F
0061:  GOTO   060
0062:  GOTO   063
0063:  NOP
0064:  RETURN
.................... } 
.................... //Ham Gui 4 Bit Du Lieu Ra LCD 
....................  void LCD_Send4Bit( unsigned char Data ) 
.................... { 
....................  output_bit(LCD_D4,Data&0x01); 
*
000A:  BTFSC  3D.0
000B:  GOTO   00E
000C:  BCF    08.4
000D:  GOTO   00F
000E:  BSF    08.4
000F:  BSF    03.5
0010:  BCF    08.4
....................  output_bit(LCD_D5,(Data>>1)&1); 
0011:  BCF    03.0
0012:  BCF    03.5
0013:  RRF    3D,W
0014:  ANDLW  01
0015:  BTFSS  03.2
0016:  GOTO   019
0017:  BCF    08.5
0018:  GOTO   01A
0019:  BSF    08.5
001A:  BSF    03.5
001B:  BCF    08.5
....................  output_bit(LCD_D6,(Data>>2)&1); 
001C:  BCF    03.5
001D:  RRF    3D,W
001E:  MOVWF  77
001F:  RRF    77,F
0020:  MOVLW  3F
0021:  ANDWF  77,F
0022:  MOVF   77,W
0023:  ANDLW  01
0024:  BTFSS  03.2
0025:  GOTO   028
0026:  BCF    08.6
0027:  GOTO   029
0028:  BSF    08.6
0029:  BSF    03.5
002A:  BCF    08.6
....................  output_bit(LCD_D7,(Data>>3)&1); 
002B:  BCF    03.5
002C:  RRF    3D,W
002D:  MOVWF  77
002E:  RRF    77,F
002F:  RRF    77,F
0030:  MOVLW  1F
0031:  ANDWF  77,F
0032:  MOVF   77,W
0033:  ANDLW  01
0034:  BTFSS  03.2
0035:  GOTO   038
0036:  BCF    08.7
0037:  GOTO   039
0038:  BSF    08.7
0039:  BSF    03.5
003A:  BCF    08.7
003B:  BCF    03.5
003C:  RETURN
.................... } 
.................... // Ham Gui 1 Lenh Cho LCD 
....................  void LCD_SendCommand (unsigned char command ) 
.................... { 
.................... LCD_Send4Bit  ( command >>4 );/* Gui 4 bit cao */ 
*
0065:  SWAPF  3B,W
0066:  MOVWF  3C
0067:  MOVLW  0F
0068:  ANDWF  3C,F
0069:  MOVF   3C,W
006A:  MOVWF  3D
006B:  CALL   00A
.................... LCD_Enable () ; 
006C:  CALL   051
.................... LCD_Send4Bit  ( command  );      /* Gui 4 bit thap*/ 
006D:  MOVF   3B,W
006E:  MOVWF  3D
006F:  CALL   00A
.................... LCD_Enable () ; 
0070:  CALL   051
0071:  RETURN
.................... } 
.................... // Ham Khoi Tao LCD 
....................  void LCD_Init ( void ) 
.................... { 
.................... output_drive(LCD_D4); 
0072:  BSF    03.5
0073:  BCF    08.4
.................... output_drive(LCD_D5); 
0074:  BCF    08.5
.................... output_drive(LCD_D6); 
0075:  BCF    08.6
.................... output_drive(LCD_D7); 
0076:  BCF    08.7
.................... output_drive(LCD_EN); 
0077:  BCF    09.2
.................... output_drive(LCD_RS); 
0078:  BCF    09.0
.................... output_drive(LCD_RW); 
0079:  BCF    09.1
.................... LCD_Send4Bit(0x00); 
007A:  BCF    03.5
007B:  CLRF   3D
007C:  CALL   00A
.................... delay_ms(20); 
007D:  MOVLW  14
007E:  MOVWF  3A
007F:  CALL   03D
.................... output_low(LCD_RS); 
0080:  BSF    03.5
0081:  BCF    09.0
0082:  BCF    03.5
0083:  BCF    09.0
.................... output_low(LCD_RW); 
0084:  BSF    03.5
0085:  BCF    09.1
0086:  BCF    03.5
0087:  BCF    09.1
.................... LCD_Send4Bit(0x03); 
0088:  MOVLW  03
0089:  MOVWF  3D
008A:  CALL   00A
.................... LCD_Enable(); 
008B:  CALL   051
.................... delay_ms(5); 
008C:  MOVLW  05
008D:  MOVWF  3A
008E:  CALL   03D
.................... LCD_Enable(); 
008F:  CALL   051
.................... delay_us(100); 
0090:  MOVLW  A6
0091:  MOVWF  77
0092:  DECFSZ 77,F
0093:  GOTO   092
0094:  NOP
.................... LCD_Enable(); 
0095:  CALL   051
.................... LCD_Send4Bit(0x02); 
0096:  MOVLW  02
0097:  MOVWF  3D
0098:  CALL   00A
.................... LCD_Enable(); 
0099:  CALL   051
.................... LCD_SendCommand( 0x28 );      // giao thuc 4 bit, hien thi 2 hang, ki tu 5x8 
009A:  MOVLW  28
009B:  MOVWF  3B
009C:  CALL   065
.................... LCD_SendCommand( 0x0c);    // cho phep hien thi man hinh 
009D:  MOVLW  0C
009E:  MOVWF  3B
009F:  CALL   065
.................... LCD_SendCommand( 0x06 );      // tang ID, khong dich khung hinh 
00A0:  MOVLW  06
00A1:  MOVWF  3B
00A2:  CALL   065
.................... LCD_SendCommand( 0x01 ); // xoa toan bo khung hinh 
00A3:  MOVLW  01
00A4:  MOVWF  3B
00A5:  CALL   065
00A6:  BCF    0A.3
00A7:  BCF    0A.4
00A8:  GOTO   1CE (RETURN)
.................... } 
.................... void LCD_Gotoxy(unsigned char x, unsigned char y) 
.................... { 
....................   unsigned char address; 
....................   if(!y) 
*
0115:  MOVF   38,F
0116:  BTFSS  03.2
0117:  GOTO   11C
....................   address = (0x80+x); 
0118:  MOVLW  80
0119:  ADDWF  37,W
011A:  MOVWF  39
011B:  GOTO   11F
....................   else 
....................   address = (0xC0+x); 
011C:  MOVLW  C0
011D:  ADDWF  37,W
011E:  MOVWF  39
....................   delay_us(1000); 
011F:  MOVLW  01
0120:  MOVWF  3A
0121:  CALL   03D
....................   LCD_SendCommand(address); 
0122:  MOVF   39,W
0123:  MOVWF  3B
0124:  CALL   065
....................   delay_us(50); 
0125:  MOVLW  52
0126:  MOVWF  77
0127:  DECFSZ 77,F
0128:  GOTO   127
0129:  GOTO   12A
012A:  NOP
012B:  RETURN
.................... } 
.................... // Ham Xoa Man Hinh LCD 
.................... void LCD_Clear() 
.................... { 
....................   LCD_SendCommand(0x01);   
*
00A9:  MOVLW  01
00AA:  MOVWF  3B
00AB:  CALL   065
....................   delay_ms(10); 
00AC:  MOVLW  0A
00AD:  MOVWF  3A
00AE:  CALL   03D
00AF:  RETURN
.................... } 
.................... // Ham Gui 1 Ki Tu Len LCD 
....................  void LCD_PutChar ( unsigned char Data ) 
.................... { 
....................  output_high(LCD_RS); 
*
0141:  BSF    03.5
0142:  BCF    09.0
0143:  BCF    03.5
0144:  BSF    09.0
....................  LCD_SendCommand( Data ); 
0145:  MOVF   3A,W
0146:  MOVWF  3B
0147:  CALL   065
....................  output_low(LCD_RS); 
0148:  BSF    03.5
0149:  BCF    09.0
014A:  BCF    03.5
014B:  BCF    09.0
.................... } 
.................... void LCD_Puts (char *s) 
.................... { 
....................    while (*s) 
*
012C:  MOVF   38,W
012D:  MOVWF  7A
012E:  MOVF   37,W
012F:  MOVWF  04
0130:  BCF    03.7
0131:  BTFSC  7A.0
0132:  BSF    03.7
0133:  MOVF   00,F
0134:  BTFSC  03.2
0135:  GOTO   150
....................    { 
....................       LCD_PutChar(*s); 
0136:  MOVF   38,W
0137:  MOVWF  7A
0138:  MOVF   37,W
0139:  MOVWF  04
013A:  BCF    03.7
013B:  BTFSC  7A.0
013C:  BSF    03.7
013D:  MOVF   00,W
013E:  MOVWF  39
013F:  MOVF   39,W
0140:  MOVWF  3A
....................       s++; 
*
014C:  INCF   37,F
014D:  BTFSC  03.2
014E:  INCF   38,F
014F:  GOTO   12C
....................    } 
0150:  RETURN
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... #include <var.h> 
.................... #ifndef _VAR_ 
.................... #define _VAR_ 
....................    //const unsigned char  chu_so[10] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90}; 
....................    //gia tri tren led 7 thanh          0  1     2    3     4    5   6     7   8    9 
....................    //const unsigned char OFF_LED=0xff; 
....................    //unsigned char buffer[3]; 
.................... #endif                                           
....................  
....................  
.................... void main() 
*
01BF:  MOVF   03,W
01C0:  ANDLW  1F
01C1:  MOVWF  03
01C2:  CLRF   21
01C3:  CLRF   20
01C4:  BSF    03.5
01C5:  BSF    1F.0
01C6:  BSF    1F.1
01C7:  BSF    1F.2
01C8:  BCF    1F.3
01C9:  MOVLW  07
01CA:  MOVWF  1C
01CB:  BCF    03.7
.................... { 
....................    int8 str[20]; 
....................    LCD_Init(); 
01CC:  BCF    03.5
01CD:  GOTO   072
....................    LCD_Clear(); 
01CE:  CALL   0A9
....................    sprintf(str,"Hello Dung"); 
01CF:  CLRF   21
01D0:  MOVLW  22
01D1:  MOVWF  20
01D2:  MOVLW  04
01D3:  BSF    03.6
01D4:  MOVWF  0D
01D5:  MOVLW  00
01D6:  MOVWF  0F
01D7:  BCF    03.6
01D8:  GOTO   0BD
....................    LCD_Gotoxy(0,0); 
01D9:  CLRF   37
01DA:  CLRF   38
01DB:  CALL   115
....................    LCD_Puts(str); 
01DC:  CLRF   38
01DD:  MOVLW  22
01DE:  MOVWF  37
01DF:  CALL   12C
....................    delay_ms(1000); 
01E0:  MOVLW  04
01E1:  MOVWF  37
01E2:  MOVLW  FA
01E3:  MOVWF  3A
01E4:  CALL   03D
01E5:  DECFSZ 37,F
01E6:  GOTO   1E2
....................    LCD_Clear(); 
01E7:  CALL   0A9
....................    while(TRUE) 
....................    { 
....................      for (int i=0;i<100;i++) 
01E8:  CLRF   36
01E9:  MOVF   36,W
01EA:  SUBLW  63
01EB:  BTFSS  03.0
01EC:  GOTO   207
....................      { 
....................       sprintf(str,"%2d",i); 
01ED:  CLRF   21
01EE:  MOVLW  22
01EF:  MOVWF  20
01F0:  MOVF   36,W
01F1:  MOVWF  37
01F2:  MOVLW  11
01F3:  MOVWF  38
01F4:  GOTO   166
....................       LCD_Gotoxy(5,1); 
01F5:  MOVLW  05
01F6:  MOVWF  37
01F7:  MOVLW  01
01F8:  MOVWF  38
01F9:  CALL   115
....................       LCD_Puts(str); 
01FA:  CLRF   38
01FB:  MOVLW  22
01FC:  MOVWF  37
01FD:  CALL   12C
....................       delay_ms(500); 
01FE:  MOVLW  02
01FF:  MOVWF  37
0200:  MOVLW  FA
0201:  MOVWF  3A
0202:  CALL   03D
0203:  DECFSZ 37,F
0204:  GOTO   200
0205:  INCF   36,F
0206:  GOTO   1E9
....................      } 
0207:  GOTO   1E8
....................    } 
....................  
.................... } 
0208:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
