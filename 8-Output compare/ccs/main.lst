CCS PCM C Compiler, Version 5.015, 5967               24-Apr-22 10:23

               Filename:   D:\STUDY\PIC\8-Output compare\ccs\main.lst

               ROM used:   505 words (6%)
                           Largest free fragment is 2048
               RAM used:   43 (12%) at main() level
                           50 (14%) worst case
               Stack used: 4 locations (3 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1A5
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  MOVLW  8C
0028:  MOVWF  04
0029:  BTFSS  00.2
002A:  GOTO   02D
002B:  BTFSC  0C.2
002C:  GOTO   04E
002D:  MOVF   22,W
002E:  MOVWF  04
002F:  MOVF   23,W
0030:  MOVWF  77
0031:  MOVF   24,W
0032:  MOVWF  78
0033:  MOVF   25,W
0034:  MOVWF  79
0035:  MOVF   26,W
0036:  MOVWF  7A
0037:  MOVF   27,W
0038:  BSF    03.6
0039:  MOVWF  0D
003A:  BCF    03.6
003B:  MOVF   28,W
003C:  BSF    03.6
003D:  MOVWF  0F
003E:  BCF    03.6
003F:  MOVF   29,W
0040:  BSF    03.6
0041:  MOVWF  0C
0042:  BCF    03.6
0043:  MOVF   2A,W
0044:  BSF    03.6
0045:  MOVWF  0E
0046:  BCF    03.6
0047:  MOVF   20,W
0048:  MOVWF  0A
0049:  SWAPF  21,W
004A:  MOVWF  03
004B:  SWAPF  7F,F
004C:  SWAPF  7F,W
004D:  RETFIE
004E:  BCF    0A.3
004F:  BCF    0A.4
0050:  GOTO   051
.................... #include <main.h> 
.................... /** 
....................   ****************************************************************************** 
....................   * Ten Tep      :        main.h 
....................   * Tac Gia      :        Nguyen Quy Nhat 
....................   * Cong Ty      :        MinhHaGroup 
....................   * Website      :        BanLinhKien.Vn 
....................   * Phien Ban    :        V1.0.0 
....................   * Ngay         :        31-08-2012 
....................   * Tom Tat      :        Khai bao cac thu vien. 
....................   *                       Cau hinh mot so chuc nang cho trinh bien dich. 
....................   *                       Cau hinh mot so chuc nang cho CHIP. 
....................   *                       Dinh nghia I/O. 
....................   *            
....................   * 
....................   ****************************************************************************** 
....................   * Chu Y      :           
....................   *                           
....................   *                       
....................   ****************************************************************************** 
....................   */ 
.................... #ifndef _MAIN_ 
.................... #define _MAIN_ 
.................... /***************KHAI BAO CAC THU VIEN*****************/    
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
006D:  DATA CF,2A
006E:  DATA 54,28
006F:  DATA 55,2A
0070:  DATA A0,21
0071:  DATA CF,26
0072:  DATA D0,20
0073:  DATA D2,22
0074:  DATA 00,00
0075:  DATA C2,30
0076:  DATA 6E,26
0077:  DATA 69,37
0078:  DATA E8,25
0079:  DATA E9,32
007A:  DATA 6E,17
007B:  DATA 56,37
007C:  DATA 00,00
*
0104:  MOVF   2F,W
0105:  MOVWF  04
0106:  BCF    03.7
0107:  BTFSC  30.0
0108:  BSF    03.7
0109:  MOVF   48,W
010A:  MOVWF  00
010B:  INCF   04,F
010C:  CLRF   00
010D:  INCF   2F,F
010E:  BTFSC  03.2
010F:  INCF   30,F
0110:  RETURN
0111:  MOVF   0B,W
0112:  MOVWF  45
0113:  BCF    0B.7
0114:  BSF    03.5
0115:  BSF    03.6
0116:  BSF    0C.7
0117:  BSF    0C.0
0118:  NOP
0119:  NOP
011A:  BCF    03.5
011B:  BCF    03.6
011C:  BTFSC  45.7
011D:  BSF    0B.7
011E:  BSF    03.6
011F:  MOVF   0C,W
0120:  ANDLW  7F
0121:  BTFSC  03.2
0122:  GOTO   165
0123:  BCF    03.6
0124:  MOVWF  45
0125:  BSF    03.6
0126:  MOVF   0D,W
0127:  BCF    03.6
0128:  MOVWF  46
0129:  BSF    03.6
012A:  MOVF   0F,W
012B:  BCF    03.6
012C:  MOVWF  47
012D:  MOVF   45,W
012E:  MOVWF  48
012F:  CALL   104
0130:  MOVF   46,W
0131:  BSF    03.6
0132:  MOVWF  0D
0133:  BCF    03.6
0134:  MOVF   47,W
0135:  BSF    03.6
0136:  MOVWF  0F
0137:  BCF    03.6
0138:  MOVF   0B,W
0139:  MOVWF  48
013A:  BCF    0B.7
013B:  BSF    03.5
013C:  BSF    03.6
013D:  BSF    0C.7
013E:  BSF    0C.0
013F:  NOP
0140:  NOP
0141:  BCF    03.5
0142:  BCF    03.6
0143:  BTFSC  48.7
0144:  BSF    0B.7
0145:  BSF    03.6
0146:  RLF    0C,W
0147:  RLF    0E,W
0148:  ANDLW  7F
0149:  BTFSC  03.2
014A:  GOTO   165
014B:  BCF    03.6
014C:  MOVWF  45
014D:  BSF    03.6
014E:  MOVF   0D,W
014F:  BCF    03.6
0150:  MOVWF  46
0151:  BSF    03.6
0152:  MOVF   0F,W
0153:  BCF    03.6
0154:  MOVWF  47
0155:  MOVF   45,W
0156:  MOVWF  48
0157:  CALL   104
0158:  MOVF   46,W
0159:  BSF    03.6
015A:  MOVWF  0D
015B:  BCF    03.6
015C:  MOVF   47,W
015D:  BSF    03.6
015E:  MOVWF  0F
015F:  INCF   0D,F
0160:  BTFSC  03.2
0161:  INCF   0F,F
0162:  BCF    03.6
0163:  GOTO   111
0164:  BSF    03.6
0165:  BCF    03.6
0166:  RETURN
....................  
.................... #list 
....................  
.................... /**************KHAI BAO CAU HINH FUSE BIT************/ 
.................... /////////////////////////////////////////////////////// 
.................... //                                                   // 
.................... // Voi moi muc phai chon mot trong danh sach dua ra  // 
.................... //                                                   // 
.................... /////////////////////////////////////////////////////// 
....................  
.................... //_________________POINTER AND ADC____________________ 
....................  
.................... #device *=16 adc=10          //   su dung con tro 16 bit, bo chuyen doi ADC 10 bit 
.................... //#device *=16 adc=8          //  su dung con tro 16 bit, bo chuyen doi ADC 8 bit 
....................  
.................... //__________________WATCH DOG TIMER___________________ 
....................  
.................... #FUSES NOWDT                   //   khong su dung bo Watch Dog Timer 
....................  
.................... //__________________HIGH SPEED OSC____________________ 
....................  
.................... //#FUSES LP                        // Su dung nguon dao dong tan so thap < 200 khz 
.................... //#FUSES XT                        // Dao dong thach anh <= 4mhz voi PCM/PCH , 3mhz to 10 mhz voi PCD 
.................... //#FUSES RC                        // Dao dong RC voi CLKOUT 
.................... #FUSES HS                      //Dao dong tan so cao (> 4mhz voi PCM/PCH) (>10mhz voi PCD) 
....................  
.................... //__________________POWER UP TIMER____________________ 
....................  
.................... #FUSES NOPUT                    //Khong su dung Power Up Timer 
.................... //#FUSES PUT                        //Su dung Power Up Timer 
.................... //__________________BROWN OUT_________________________ 
....................  
.................... #FUSES NOBROWNOUT               //Khong reset chip khi BrownOut 
.................... //#FUSES BROWNOUT                   //Reset chi khi co BrownOut 
.................... //______________LOW VOLTAGE PROGRAM___________________ 
....................  
.................... #FUSES NOLVP                    //No low voltage programing, B3(PIC16) or B5(PIC18) used for I/O 
.................... //#FUSES LVP                        //Low Voltage Programming on B3(PIC16) or B5(PIC18) 
.................... //______________CODE PROTECED EEPROM__________________ 
....................  
.................... #FUSES NOCPD                    //Khong bao ve du lieu EEPROM 
.................... //#FUSES CPD                        //Dung che do bao ve du lieu EEPROM 
....................  
.................... //_____________PROGRAM WRITE PROTECED_________________ 
....................  
.................... //#FUSES WRT                      //Program Memory Write Protected 
.................... //#FUSES WRT_50%                  //Lower half of Program Memory is Write Protected 
.................... //#FUSES WRT_5%                   //Lower 255 bytes of Program Memory is Write Protected 
.................... #FUSES NOWRT                    //Program memory not write protected 
....................  
.................... //_____________ENABLE DEBUG MODE FOR ICD______________ 
....................  
.................... //#device ICD=TRUE            // Kich hoat chuc nang DEBUG ICD Integrated Chip Debugging 
.................... //________________DEBUG FOR ICD_______________________ 
....................  
.................... #FUSES NODEBUG                  //Khong su dung che do Debug voi ICD 
.................... //#FUSES DEBUG                      // Su dung che do Debug voi ICD 
....................  
.................... //___________CODE PROTECED FROM READING_______________ 
.................... #FUSES NOPROTECT                // Cho phep doc lai Code 
.................... //#FUSES PROTECT                    // Khong cho phep doc lai code  
....................  
.................... //___________________CLOCK____________________________ 
....................  
.................... #use delay(clock=24000000)            // Su dung tan so 24Mhz, khong reset watch dog khi goi den ham delay. 
*
00A4:  MOVLW  48
00A5:  MOVWF  04
00A6:  BCF    03.7
00A7:  MOVF   00,W
00A8:  BTFSC  03.2
00A9:  GOTO   0B8
00AA:  MOVLW  07
00AB:  MOVWF  78
00AC:  CLRF   77
00AD:  DECFSZ 77,F
00AE:  GOTO   0AD
00AF:  DECFSZ 78,F
00B0:  GOTO   0AC
00B1:  MOVLW  C7
00B2:  MOVWF  77
00B3:  DECFSZ 77,F
00B4:  GOTO   0B3
00B5:  NOP
00B6:  DECFSZ 00,F
00B7:  GOTO   0AA
00B8:  RETURN
.................... //#use delay(clock=20000000,RESTART_WDT)   // Su dung tan so 20Mhz, reset watch dog khi goi den ham delay. 
....................  
.................... //________________FAST_STANDAR I/O PORTA___________________ 
....................  
.................... //#use FAST_IO(A)          // Thiet lap che do fast I/O cho PORTA, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... #use STANDARD_IO(A)     // Thiet lap che do chuan I/O cho PORTA, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(A)       // 
....................  
.................... //________________FAST_STANDAR I/O PORTB___________________ 
....................  
.................... //#use FAST_IO(B)          // Thiet lap che do fast I/O cho PORTB, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... #use STANDARD_IO(B)     // Thiet lap che do chuan I/O cho PORTB, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(B)       // 
....................  
.................... //________________FAST_STANDAR I/O PORTC____________________ 
....................  
.................... //#use FAST_IO(C)          // Thiet lap che do fast I/O cho PORTC, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... #use STANDARD_IO(C)     // Thiet lap che do chuan I/O cho PORTC, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(C)       // 
....................  
.................... //________________FAST_STANDAR I/O PORTD_____________________ 
....................  
.................... #use FAST_IO(D)          // Thiet lap che do fast I/O cho PORTD, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... //#use STANDARD_IO(D)     // Thiet lap che do chuan I/O cho PORTD, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(D)       // 
....................  
.................... //_______________FAST_STANDAR I/O PORTE___________________ 
....................  
.................... #use FAST_IO(E)        // Thiet lap che do fast I/O cho PORTE, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... //#use STANDARD_IO(E)     // Thiet lap che do chuan I/O cho PORTE, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(E)       // 
....................  
....................  
.................... //________________________CASE_____________________________ 
....................  
....................  
.................... #CASE               // Phan biet chu hoa va chu thuong trong khi lap trinh code 
....................  
....................  
.................... /************** DINH NGHIA CAC CHAN I/O ************/ 
.................... //______________________I/O LCD____________________________ 
.................... #define LCD_RS PIN_E0                         
.................... #define LCD_RW PIN_E1 
.................... #define LCD_EN PIN_E2 
.................... #define LCD_D4 PIN_D4                  
.................... #define LCD_D5 PIN_D5 
.................... #define LCD_D6 PIN_D6 
.................... #define LCD_D7 PIN_D7  
.................... #endif 
....................  
.................... #include <var.h> 
.................... #ifndef _VAR_ 
.................... #define _VAR_ 
.................... int1 set=0; 
.................... unsigned int16 Value; 
.................... #endif                                           
....................  
.................... #include "lcd.c" 
.................... /** 
....................   ****************************************************************************** 
....................   * Ten Tep      :        lcd_16x2.c 
....................   * Tac Gia      :        Nguyen Quy Nhat 
....................   * Cong Ty      :         MinhHaGroup 
....................   *   Website    :         BanLinhKien.Vn 
....................   * Phien Ban   :         V1.0.0 
....................   * Ngay         :       31-07-2012 
....................   * Tom Tat   :     Dinh nghia cac ham dieu khien LCD 16x2. 
....................   *            
....................   * 
....................   ****************************************************************************** 
....................   * Chu Y      : 
....................   *                       
....................   ****************************************************************************** 
....................   */ 
.................... //Tao Xung 
....................  void LCD_Enable(void) 
.................... { 
....................  output_high(LCD_EN); 
00B9:  BSF    09.2
....................  delay_us(3); 
00BA:  MOVLW  05
00BB:  MOVWF  77
00BC:  DECFSZ 77,F
00BD:  GOTO   0BC
00BE:  GOTO   0BF
....................  output_low(LCD_EN); 
00BF:  BCF    09.2
....................  delay_us(50);  
00C0:  MOVLW  63
00C1:  MOVWF  77
00C2:  DECFSZ 77,F
00C3:  GOTO   0C2
00C4:  GOTO   0C5
00C5:  RETURN
.................... } 
.................... //Ham Gui 4 Bit Du Lieu Ra LCD 
....................  void LCD_Send4Bit( unsigned char Data ) 
.................... { 
....................  output_bit(LCD_D4,Data&0x01); 
*
007D:  BTFSC  4B.0
007E:  GOTO   081
007F:  BCF    08.4
0080:  GOTO   082
0081:  BSF    08.4
....................  output_bit(LCD_D5,(Data>>1)&1); 
0082:  BCF    03.0
0083:  RRF    4B,W
0084:  ANDLW  01
0085:  BTFSS  03.2
0086:  GOTO   089
0087:  BCF    08.5
0088:  GOTO   08A
0089:  BSF    08.5
....................  output_bit(LCD_D6,(Data>>2)&1); 
008A:  RRF    4B,W
008B:  MOVWF  77
008C:  RRF    77,F
008D:  MOVLW  3F
008E:  ANDWF  77,F
008F:  MOVF   77,W
0090:  ANDLW  01
0091:  BTFSS  03.2
0092:  GOTO   095
0093:  BCF    08.6
0094:  GOTO   096
0095:  BSF    08.6
....................  output_bit(LCD_D7,(Data>>3)&1); 
0096:  RRF    4B,W
0097:  MOVWF  77
0098:  RRF    77,F
0099:  RRF    77,F
009A:  MOVLW  1F
009B:  ANDWF  77,F
009C:  MOVF   77,W
009D:  ANDLW  01
009E:  BTFSS  03.2
009F:  GOTO   0A2
00A0:  BCF    08.7
00A1:  GOTO   0A3
00A2:  BSF    08.7
00A3:  RETURN
.................... } 
.................... // Ham Gui 1 Lenh Cho LCD 
....................  void LCD_SendCommand (unsigned char command ) 
.................... { 
.................... LCD_Send4Bit  ( command >>4 );/* Gui 4 bit cao */ 
*
00C6:  SWAPF  49,W
00C7:  MOVWF  4A
00C8:  MOVLW  0F
00C9:  ANDWF  4A,F
00CA:  MOVF   4A,W
00CB:  MOVWF  4B
00CC:  CALL   07D
.................... LCD_Enable () ; 
00CD:  CALL   0B9
.................... LCD_Send4Bit  ( command  );      /* Gui 4 bit thap*/ 
00CE:  MOVF   49,W
00CF:  MOVWF  4B
00D0:  CALL   07D
.................... LCD_Enable () ; 
00D1:  CALL   0B9
00D2:  RETURN
.................... } 
.................... // Ham Khoi Tao LCD 
....................  void LCD_Init ( void ) 
.................... { 
.................... output_drive(LCD_D4); 
00D3:  BSF    03.5
00D4:  BCF    08.4
.................... output_drive(LCD_D5); 
00D5:  BCF    08.5
.................... output_drive(LCD_D6); 
00D6:  BCF    08.6
.................... output_drive(LCD_D7); 
00D7:  BCF    08.7
.................... output_drive(LCD_EN); 
00D8:  BCF    09.2
.................... output_drive(LCD_RS); 
00D9:  BCF    09.0
.................... output_drive(LCD_RW); 
00DA:  BCF    09.1
.................... LCD_Send4Bit(0x00); 
00DB:  BCF    03.5
00DC:  CLRF   4B
00DD:  CALL   07D
.................... delay_ms(20); 
00DE:  MOVLW  14
00DF:  MOVWF  48
00E0:  CALL   0A4
.................... output_low(LCD_RS); 
00E1:  BCF    09.0
.................... output_low(LCD_RW); 
00E2:  BCF    09.1
.................... LCD_Send4Bit(0x03); 
00E3:  MOVLW  03
00E4:  MOVWF  4B
00E5:  CALL   07D
.................... LCD_Enable(); 
00E6:  CALL   0B9
.................... delay_ms(5); 
00E7:  MOVLW  05
00E8:  MOVWF  48
00E9:  CALL   0A4
.................... LCD_Enable(); 
00EA:  CALL   0B9
.................... delay_us(100); 
00EB:  MOVLW  C7
00EC:  MOVWF  77
00ED:  DECFSZ 77,F
00EE:  GOTO   0ED
00EF:  GOTO   0F0
.................... LCD_Enable(); 
00F0:  CALL   0B9
.................... LCD_Send4Bit(0x02); 
00F1:  MOVLW  02
00F2:  MOVWF  4B
00F3:  CALL   07D
.................... LCD_Enable(); 
00F4:  CALL   0B9
.................... LCD_SendCommand( 0x28 );      // giao thuc 4 bit, hien thi 2 hang, ki tu 5x8 
00F5:  MOVLW  28
00F6:  MOVWF  49
00F7:  CALL   0C6
.................... LCD_SendCommand( 0x0c);    // cho phep hien thi man hinh 
00F8:  MOVLW  0C
00F9:  MOVWF  49
00FA:  CALL   0C6
.................... LCD_SendCommand( 0x06 );      // tang ID, khong dich khung hinh 
00FB:  MOVLW  06
00FC:  MOVWF  49
00FD:  CALL   0C6
.................... LCD_SendCommand( 0x01 ); // xoa toan bo khung hinh 
00FE:  MOVLW  01
00FF:  MOVWF  49
0100:  CALL   0C6
0101:  BCF    0A.3
0102:  BCF    0A.4
0103:  GOTO   1B7 (RETURN)
.................... } 
.................... void LCD_Gotoxy(unsigned char x, unsigned char y) 
.................... { 
....................   unsigned char address; 
....................   if(!y) 
*
018F:  MOVF   46,F
0190:  BTFSS  03.2
0191:  GOTO   196
....................   address = (0x80+x); 
0192:  MOVLW  80
0193:  ADDWF  45,W
0194:  MOVWF  47
0195:  GOTO   199
....................   else 
....................   address = (0xC0+x); 
0196:  MOVLW  C0
0197:  ADDWF  45,W
0198:  MOVWF  47
....................   delay_us(1000); 
0199:  MOVLW  01
019A:  MOVWF  48
019B:  CALL   0A4
....................   LCD_SendCommand(address); 
019C:  MOVF   47,W
019D:  MOVWF  49
019E:  CALL   0C6
....................   delay_ms(10); 
019F:  MOVLW  0A
01A0:  MOVWF  48
01A1:  CALL   0A4
01A2:  BCF    0A.3
01A3:  BCF    0A.4
01A4:  GOTO   1DD (RETURN)
.................... } 
.................... // Ham Xoa Man Hinh LCD 
.................... void LCD_Clear() 
.................... { 
....................   LCD_SendCommand(0x01);   
*
0186:  MOVLW  01
0187:  MOVWF  49
0188:  CALL   0C6
....................   delay_ms(10); 
0189:  MOVLW  0A
018A:  MOVWF  48
018B:  CALL   0A4
018C:  BCF    0A.3
018D:  BCF    0A.4
018E:  GOTO   1D0 (RETURN)
.................... } 
.................... // Ham Gui 1 Ki Tu Len LCD 
....................  void LCD_PutChar ( unsigned char Data ) 
.................... { 
....................  output_high(LCD_RS); 
*
017C:  BSF    09.0
....................  LCD_SendCommand( Data ); 
017D:  MOVF   48,W
017E:  MOVWF  49
017F:  CALL   0C6
....................  output_low(LCD_RS); 
0180:  BCF    09.0
.................... } 
.................... void LCD_Puts (char *s) 
.................... { 
....................    while (*s) 
*
0167:  MOVF   46,W
0168:  MOVWF  7A
0169:  MOVF   45,W
016A:  MOVWF  04
016B:  BCF    03.7
016C:  BTFSC  7A.0
016D:  BSF    03.7
016E:  MOVF   00,F
016F:  BTFSC  03.2
0170:  GOTO   185
....................    { 
....................       LCD_PutChar(*s); 
0171:  MOVF   46,W
0172:  MOVWF  7A
0173:  MOVF   45,W
0174:  MOVWF  04
0175:  BCF    03.7
0176:  BTFSC  7A.0
0177:  BSF    03.7
0178:  MOVF   00,W
0179:  MOVWF  47
017A:  MOVF   47,W
017B:  MOVWF  48
....................       s++; 
*
0181:  INCF   45,F
0182:  BTFSC  03.2
0183:  INCF   46,F
0184:  GOTO   167
....................    } 
0185:  RETURN
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... #include "timer.c" 
.................... #ifndef __TIMER_ 
.................... #define __TIMER_ 
.................... void timer0_config() 
.................... { 
.................... ////////////////////////////////////////////////////////////// 
.................... //              Cau Hinh Timer 0                     // 
.................... //         T_tm0: Chu ky xung dem cua timer 0            // 
.................... //         T_osc: Chu ky dao dong su dung cho chip         // 
.................... ////////////////////////////////////////////////////////////// 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1|RTCC_8_bit);      //   T_tm0=T_osc*4*1 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_2|RTCC_8_bit);      //   T_tm0=T_osc*4*2 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_4|RTCC_8_bit);      //   T_tm0=T_osc*4*4 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_8|RTCC_8_bit);      //   T_tm0=T_osc*4*8 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_16|RTCC_8_bit);      //   T_tm0=T_osc*4*16 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_32|RTCC_8_bit);      //   T_tm0=T_osc*4*32 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_64|RTCC_8_bit);      //   T_tm0=T_osc*4*64 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_128|RTCC_8_bit);      //   T_tm0=T_osc*4*128 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256|RTCC_8_bit);      //   T_tm0=T_osc*4*256 
.................... ///setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_1|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 1 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_2|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 2 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_4|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 4 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_8|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 8 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_16|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 16 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_32|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 32 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_64|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 64 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_128|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 128 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_256|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 256 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_1|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 1 suon xuong tai chan PIN_A4 (T0CKI)    
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_2|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 2 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_4|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 4 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_8|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 8 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_16|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 16 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_32|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 32 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_64|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 64 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_128|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 128 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_256|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 256 suon xuong tai chan PIN_A4 (T0CKI) 
....................  
.................... /******************Thiet lap ngat timer*********************/ 
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
.................... //                   NGAT TRAN TIMER 0            // 
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
.................... //enable_interrupts(INT_TIMER0);   //Cho phep ngat tran timer0 hoat dong 
.................... //disable_interrupts(INT_TIMER0);   //Khong cho phep ngat tran timer0 hoat dong (mac dinh) 
....................  
.................... } 
.................... void timer1_config() 
.................... { 
.................... //setup_timer_1(T1_INTERNAL|T1_DIV_BY_1);               // 
.................... //setup_timer_1(T1_INTERNAL|T1_DIV_BY_2);               // 
.................... //setup_timer_1(T1_INTERNAL|T1_DIV_BY_4);               // 
.................... setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);               // 
.................... //setup_timer_1(T1_EXTERNAL|T1_DIV_BY_1);               // 
.................... //setup_timer_1(T1_EXTERNAL|T1_CLK_OUT);               // 
.................... //setup_timer_1(T1_EXTERNAL|T1_EXTERNAL_SYNC);            // 
.................... //setup_timer_1(T1_EXTERNAL|T1_CLK_OUT|T1_EXTERNAL_SYNC);   // 
.................... //setup_timer_1(T1_DISABLED);                           // 
....................  
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
.................... //               NGAT TRAN TIMER 1            // 
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
.................... //enable_interrupts(INT_TIMER1);   //Cho phep ngat tran timer1 hoat dong 
.................... disable_interrupts(INT_TIMER1);   //Khong cho phep ngat tran timer1 hoat dong (mac dinh) 
....................  
.................... } 
.................... void timer2_config() 
.................... { 
.................... //############################################################ 
.................... //              Cau Hinh Timer 2                     // 
.................... //         Over_Period: 1-255                        // 
.................... //         Int_Period : 1-16                        // 
.................... //         T_Ov   :Chu ky tran bo dem timer2            // 
.................... //         T_In   :Chu ky xay ra ngat tran timer 0      // 
.................... //         T_osc   : Chu ky dao dong su dung cho chip      // 
.................... //############################################################ 
....................  
.................... //setup_timer_2(T2_DIV_BY_1,Over_Period,Int_Period);      //   T_ov=T_osc*4*1*(1+Over_Period)   ;   T_In=T_osc*4*1*(1+Over_Period)*Int_Period 
.................... //setup_timer_2(T2_DIV_BY_4,Over_Period,Int_Period);      //   T_ov=T_osc*4*4*(1+Over_Period)   ;   T_In=T_osc*4*4*(1+Over_Period)*Int_Period 
.................... //setup_timer_2(T2_DIV_BY_16,Over_Period,Int_Period);      //   T_ov=T_osc*4*16*(1+Over_Period)   ;   T_In=T_osc*4*16*(1+Over_Period)*Int_Period 
.................... //setup_timer_2(T2_DISABLED,0,1);                      //   Khong su dung bo dem timer2 
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
.................... //               NGAT TRAN TIMER 2            // 
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
....................  
.................... //enable_interrupts(INT_TIMER2);   //Cho phep ngat tran timer2 hoat dong 
.................... disable_interrupts(INT_TIMER2);   //Khong cho phep ngat tran timer2 hoat dong (mac dinh) 
.................... } 
.................... #endif 
....................  
.................... #int_CCP1 
.................... void  ngat_CCP1(void)  
.................... {   
....................    if(set) 
*
0051:  BTFSS  2C.0
0052:  GOTO   05D
....................    { 
....................    set=0; 
0053:  BCF    2C.0
....................    setup_ccp1(CCP_COMPARE_CLR_ON_MATCH); 
0054:  BCF    2B.2
0055:  MOVF   2B,W
0056:  BSF    03.5
0057:  MOVWF  07
0058:  BCF    03.5
0059:  BSF    07.2
005A:  MOVLW  09
005B:  MOVWF  17
....................    } 
005C:  GOTO   066
....................    else 
....................    { 
....................    set=1; 
005D:  BSF    2C.0
....................    setup_ccp1(CCP_COMPARE_SET_ON_MATCH); 
005E:  BCF    2B.2
005F:  MOVF   2B,W
0060:  BSF    03.5
0061:  MOVWF  07
0062:  BCF    03.5
0063:  BCF    07.2
0064:  MOVLW  08
0065:  MOVWF  17
....................    } 
....................    set_timer1(0); 
0066:  CLRF   0E
0067:  CLRF   0F
0068:  CLRF   0E
0069:  BCF    0C.2
006A:  BCF    0A.3
006B:  BCF    0A.4
006C:  GOTO   02D
.................... } 
.................... void main() 
*
01A5:  MOVF   03,W
01A6:  ANDLW  1F
01A7:  MOVWF  03
01A8:  MOVLW  FF
01A9:  MOVWF  2B
01AA:  BCF    2C.0
01AB:  CLRF   30
01AC:  CLRF   2F
01AD:  BSF    03.5
01AE:  BSF    1F.0
01AF:  BSF    1F.1
01B0:  BSF    1F.2
01B1:  BCF    1F.3
01B2:  MOVLW  07
01B3:  MOVWF  1C
01B4:  BCF    03.7
.................... {   
....................    unsigned char str[20]; 
....................    LCD_Init(); 
01B5:  BCF    03.5
01B6:  GOTO   0D3
....................    sprintf(str,"OUTPUT COMPARE"); 
01B7:  CLRF   30
01B8:  MOVLW  31
01B9:  MOVWF  2F
01BA:  MOVLW  6D
01BB:  BSF    03.6
01BC:  MOVWF  0D
01BD:  MOVLW  00
01BE:  MOVWF  0F
01BF:  BCF    03.6
01C0:  CALL   111
....................    delay_ms(10); 
01C1:  MOVLW  0A
01C2:  MOVWF  48
01C3:  CALL   0A4
....................    LCD_Puts(str); 
01C4:  CLRF   46
01C5:  MOVLW  31
01C6:  MOVWF  45
01C7:  CALL   167
....................    delay_ms(1000); 
01C8:  MOVLW  04
01C9:  MOVWF  45
01CA:  MOVLW  FA
01CB:  MOVWF  48
01CC:  CALL   0A4
01CD:  DECFSZ 45,F
01CE:  GOTO   1CA
....................    LCD_Clear(); 
01CF:  GOTO   186
....................    sprintf(str,"BanLinhKien.Vn"); 
01D0:  CLRF   30
01D1:  MOVLW  31
01D2:  MOVWF  2F
01D3:  MOVLW  75
01D4:  BSF    03.6
01D5:  MOVWF  0D
01D6:  MOVLW  00
01D7:  MOVWF  0F
01D8:  BCF    03.6
01D9:  CALL   111
....................    LCD_Gotoxy(0,0); 
01DA:  CLRF   45
01DB:  CLRF   46
01DC:  GOTO   18F
....................    LCD_Puts(str); 
01DD:  CLRF   46
01DE:  MOVLW  31
01DF:  MOVWF  45
01E0:  CALL   167
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1);  
01E1:  MOVLW  85
01E2:  MOVWF  10
....................    set_timer1(0); 
01E3:  CLRF   0E
01E4:  CLRF   0F
01E5:  CLRF   0E
....................    enable_interrupts(INT_CCP1); 
01E6:  BSF    03.5
01E7:  BSF    0C.2
....................    setup_ccp1(CCP_COMPARE_CLR_ON_MATCH); 
01E8:  BCF    03.5
01E9:  BCF    2B.2
01EA:  MOVF   2B,W
01EB:  BSF    03.5
01EC:  MOVWF  07
01ED:  BCF    03.5
01EE:  BSF    07.2
01EF:  MOVLW  09
01F0:  MOVWF  17
....................    enable_interrupts(GLOBAL);   
01F1:  MOVLW  C0
01F2:  IORWF  0B,F
....................    CCP_1=2000; 
01F3:  MOVLW  07
01F4:  MOVWF  16
01F5:  MOVLW  D0
01F6:  MOVWF  15
....................    while(TRUE) 
....................    { 
01F7:  GOTO   1F7
....................    } 
.................... }                 
....................  
01F8:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
