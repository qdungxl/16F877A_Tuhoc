CCS PCM C Compiler, Version 4.114, 93460303               06-Oct-12 01:19

               Filename: D:\Company\Project\Dien Dan\PIC\Bai 14. PWM\code\main.lst

               ROM used: 393 words (5%)
                         Largest free fragment is 2048
               RAM used: 29 (8%) at main() level
                         36 (10%) worst case
               Stack:    3 locations

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   129
0003:  NOP
.................... #include <main.h> 
.................... /** 
....................   ****************************************************************************** 
....................   * Ten Tep      :        main.h 
....................   * Tac Gia      :        Nguyen Quy Nhat 
....................   * Cong Ty      :        MinhHaGroup 
....................   * Website      :        BanLinhKien.Vn 
....................   * Phien Ban    :        V1.0.0 
....................   * Ngay         :        31-08-2012 
....................   * Tom Tat      :        Khai bao cac thu vien. 
....................   *                       Cau hinh mot so chuc nang cho trinh bien dich. 
....................   *                       Cau hinh mot so chuc nang cho CHIP. 
....................   *                       Dinh nghia I/O. 
....................   *            
....................   * 
....................   ****************************************************************************** 
....................   * Chu Y      :           
....................   *                           
....................   *                       
....................   ****************************************************************************** 
....................   */ 
.................... #ifndef _MAIN_ 
.................... #define _MAIN_ 
.................... /***************KHAI BAO CAC THU VIEN*****************/    
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... /**************KHAI BAO CAU HINH FUSE BIT************/ 
.................... /////////////////////////////////////////////////////// 
.................... //                                                   // 
.................... // Voi moi muc phai chon mot trong danh sach dua ra  // 
.................... //                                                   // 
.................... /////////////////////////////////////////////////////// 
....................  
.................... //_________________POINTER AND ADC____________________ 
....................  
.................... #device *=16 adc=10          //   su dung con tro 16 bit, bo chuyen doi ADC 10 bit 
.................... //#device *=16 adc=8          //  su dung con tro 16 bit, bo chuyen doi ADC 8 bit 
....................  
.................... //__________________WATCH DOG TIMER___________________ 
....................  
.................... #FUSES NOWDT                   //   khong su dung bo Watch Dog Timer 
....................  
.................... //__________________HIGH SPEED OSC____________________ 
....................  
.................... //#FUSES LP                        // Su dung nguon dao dong tan so thap < 200 khz 
.................... //#FUSES XT                        // Dao dong thach anh <= 4mhz voi PCM/PCH , 3mhz to 10 mhz voi PCD 
.................... //#FUSES RC                        // Dao dong RC voi CLKOUT 
.................... #FUSES HS                      //Dao dong tan so cao (> 4mhz voi PCM/PCH) (>10mhz voi PCD) 
....................  
.................... //__________________POWER UP TIMER____________________ 
....................  
.................... #FUSES NOPUT                    //Khong su dung Power Up Timer 
.................... //#FUSES PUT                        //Su dung Power Up Timer 
.................... //__________________BROWN OUT_________________________ 
....................  
.................... #FUSES NOBROWNOUT               //Khong reset chip khi BrownOut 
.................... //#FUSES BROWNOUT                   //Reset chi khi co BrownOut 
.................... //______________LOW VOLTAGE PROGRAM___________________ 
....................  
.................... #FUSES NOLVP                    //No low voltage programing, B3(PIC16) or B5(PIC18) used for I/O 
.................... //#FUSES LVP                        //Low Voltage Programming on B3(PIC16) or B5(PIC18) 
.................... //______________CODE PROTECED EEPROM__________________ 
....................  
.................... #FUSES NOCPD                    //Khong bao ve du lieu EEPROM 
.................... //#FUSES CPD                        //Dung che do bao ve du lieu EEPROM 
....................  
.................... //_____________PROGRAM WRITE PROTECED_________________ 
....................  
.................... //#FUSES WRT                      //Program Memory Write Protected 
.................... //#FUSES WRT_50%                  //Lower half of Program Memory is Write Protected 
.................... //#FUSES WRT_5%                   //Lower 255 bytes of Program Memory is Write Protected 
.................... #FUSES NOWRT                    //Program memory not write protected 
....................  
.................... //_____________ENABLE DEBUG MODE FOR ICD______________ 
....................  
.................... //#device ICD=TRUE            // Kich hoat chuc nang DEBUG ICD Integrated Chip Debugging 
.................... //________________DEBUG FOR ICD_______________________ 
....................  
.................... #FUSES NODEBUG                  //Khong su dung che do Debug voi ICD 
.................... //#FUSES DEBUG                      // Su dung che do Debug voi ICD 
....................  
.................... //___________CODE PROTECED FROM READING_______________ 
.................... #FUSES NOPROTECT                // Cho phep doc lai Code 
.................... //#FUSES PROTECT                    // Khong cho phep doc lai code  
....................  
.................... //___________________CLOCK____________________________ 
....................  
.................... #use delay(clock=24000000)            // Su dung tan so 20Mhz, khong reset watch dog khi goi den ham delay. 
*
0038:  MOVLW  3A
0039:  MOVWF  04
003A:  BCF    03.7
003B:  MOVF   00,W
003C:  BTFSC  03.2
003D:  GOTO   04C
003E:  MOVLW  07
003F:  MOVWF  78
0040:  CLRF   77
0041:  DECFSZ 77,F
0042:  GOTO   041
0043:  DECFSZ 78,F
0044:  GOTO   040
0045:  MOVLW  C7
0046:  MOVWF  77
0047:  DECFSZ 77,F
0048:  GOTO   047
0049:  NOP
004A:  DECFSZ 00,F
004B:  GOTO   03E
004C:  RETURN
.................... //#use delay(clock=20000000,RESTART_WDT)   // Su dung tan so 20Mhz, reset watch dog khi goi den ham delay. 
....................  
.................... //________________FAST_STANDAR I/O PORTA___________________ 
....................  
.................... //#use FAST_IO(A)          // Thiet lap che do fast I/O cho PORTA, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... #use STANDARD_IO(A)     // Thiet lap che do chuan I/O cho PORTA, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(A)       // 
....................  
.................... //________________FAST_STANDAR I/O PORTB___________________ 
....................  
.................... //#use FAST_IO(B)          // Thiet lap che do fast I/O cho PORTB, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... #use STANDARD_IO(B)     // Thiet lap che do chuan I/O cho PORTB, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(B)       // 
....................  
.................... //________________FAST_STANDAR I/O PORTC____________________ 
....................  
.................... //#use FAST_IO(C)          // Thiet lap che do fast I/O cho PORTC, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... #use STANDARD_IO(C)     // Thiet lap che do chuan I/O cho PORTC, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(C)       // 
....................  
.................... //________________FAST_STANDAR I/O PORTD_____________________ 
....................  
.................... #use FAST_IO(D)          // Thiet lap che do fast I/O cho PORTD, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... //#use STANDARD_IO(D)     // Thiet lap che do chuan I/O cho PORTD, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(D)       // 
....................  
.................... //_______________FAST_STANDAR I/O PORTE___________________ 
....................  
.................... #use FAST_IO(E)        // Thiet lap che do fast I/O cho PORTE, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... //#use STANDARD_IO(E)     // Thiet lap che do chuan I/O cho PORTE, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(E)       // 
....................  
....................  
.................... //________________________CASE_____________________________ 
....................  
....................  
.................... //#CASE               // Phan biet chu hoa va chu thuong trong khi lap trinh code 
....................  
....................  
.................... /************** DINH NGHIA CAC CHAN I/O ************/ 
....................  
.................... //////////////////////////////////////////////////////// 
.................... //   Xoa chu thich cho cac chuc nang I/O su dung       // 
.................... //  Dinh nghia lai cac chan cho phu hop voi phan cung //  
.................... //////////////////////////////////////////////////////// 
....................  
.................... //______________________I/O LCD____________________________ 
.................... #define LCD_RS PIN_E0                         
.................... #define LCD_RW PIN_E1 
.................... #define LCD_EN PIN_E2 
.................... #define LCD_D4 PIN_D4                  
.................... #define LCD_D5 PIN_D5 
.................... #define LCD_D6 PIN_D6 
.................... #define LCD_D7 PIN_D7  
.................... #endif 
....................  
.................... #include <var.h> 
.................... #ifndef _VAR_ 
.................... #define _VAR_ 
.................... #endif                                           
....................  
.................... #include "lcd.c" 
.................... /** 
....................   ****************************************************************************** 
....................   * Ten Tep      :        lcd_16x2.c 
....................   * Tac Gia      :        Nguyen Quy Nhat 
....................   * Cong Ty      :         MinhHaGroup 
....................   *   Website    :         BanLinhKien.Vn 
....................   * Phien Ban   :         V1.0.0 
....................   * Ngay         :       31-07-2012 
....................   * Tom Tat   :     Dinh nghia cac ham dieu khien LCD 16x2. 
....................   *            
....................   * 
....................   ****************************************************************************** 
....................   * Chu Y      : 
....................   *                       
....................   ****************************************************************************** 
....................   */ 
.................... //Tao Xung 
....................  void LCD_Enable(void) 
.................... { 
....................  output_high(LCD_EN); 
004D:  BSF    09.2
....................  delay_us(3); 
004E:  MOVLW  05
004F:  MOVWF  77
0050:  DECFSZ 77,F
0051:  GOTO   050
0052:  GOTO   053
....................  output_low(LCD_EN); 
0053:  BCF    09.2
....................  delay_us(50);  
0054:  MOVLW  63
0055:  MOVWF  77
0056:  DECFSZ 77,F
0057:  GOTO   056
0058:  GOTO   059
.................... } 
0059:  RETURN
.................... //Ham Gui 4 Bit Du Lieu Ra LCD 
....................  void LCD_Send4Bit( unsigned char Data ) 
.................... { 
....................  output_bit(LCD_D4,Data&0x01); 
*
0011:  BTFSC  3D.0
0012:  GOTO   015
0013:  BCF    08.4
0014:  GOTO   016
0015:  BSF    08.4
....................  output_bit(LCD_D5,(Data>>1)&1); 
0016:  BCF    03.0
0017:  RRF    3D,W
0018:  ANDLW  01
0019:  BTFSS  03.2
001A:  GOTO   01D
001B:  BCF    08.5
001C:  GOTO   01E
001D:  BSF    08.5
....................  output_bit(LCD_D6,(Data>>2)&1); 
001E:  RRF    3D,W
001F:  MOVWF  77
0020:  RRF    77,F
0021:  MOVLW  3F
0022:  ANDWF  77,F
0023:  MOVF   77,W
0024:  ANDLW  01
0025:  BTFSS  03.2
0026:  GOTO   029
0027:  BCF    08.6
0028:  GOTO   02A
0029:  BSF    08.6
....................  output_bit(LCD_D7,(Data>>3)&1); 
002A:  RRF    3D,W
002B:  MOVWF  77
002C:  RRF    77,F
002D:  RRF    77,F
002E:  MOVLW  1F
002F:  ANDWF  77,F
0030:  MOVF   77,W
0031:  ANDLW  01
0032:  BTFSS  03.2
0033:  GOTO   036
0034:  BCF    08.7
0035:  GOTO   037
0036:  BSF    08.7
.................... } 
0037:  RETURN
.................... // Ham Gui 1 Lenh Cho LCD 
....................  void LCD_SendCommand (unsigned char command ) 
.................... { 
.................... LCD_Send4Bit  ( command >>4 );/* Gui 4 bit cao */ 
*
005A:  SWAPF  3B,W
005B:  MOVWF  3C
005C:  MOVLW  0F
005D:  ANDWF  3C,F
005E:  MOVF   3C,W
005F:  MOVWF  3D
0060:  CALL   011
.................... LCD_Enable () ; 
0061:  CALL   04D
.................... LCD_Send4Bit  ( command  );      /* Gui 4 bit thap*/ 
0062:  MOVF   3B,W
0063:  MOVWF  3D
0064:  CALL   011
.................... LCD_Enable () ; 
0065:  CALL   04D
.................... } 
0066:  RETURN
.................... // Ham Khoi Tao LCD 
....................  void LCD_Init ( void ) 
.................... { 
.................... output_drive(LCD_D4); 
0067:  BSF    03.5
0068:  BCF    08.4
.................... output_drive(LCD_D5); 
0069:  BCF    08.5
.................... output_drive(LCD_D6); 
006A:  BCF    08.6
.................... output_drive(LCD_D7); 
006B:  BCF    08.7
.................... output_drive(LCD_EN); 
006C:  BCF    09.2
.................... output_drive(LCD_RS); 
006D:  BCF    09.0
.................... output_drive(LCD_RW); 
006E:  BCF    09.1
.................... LCD_Send4Bit(0x00); 
006F:  BCF    03.5
0070:  CLRF   3D
0071:  CALL   011
.................... delay_ms(20); 
0072:  MOVLW  14
0073:  MOVWF  3A
0074:  CALL   038
.................... output_low(LCD_RS); 
0075:  BCF    09.0
.................... output_low(LCD_RW); 
0076:  BCF    09.1
.................... LCD_Send4Bit(0x03); 
0077:  MOVLW  03
0078:  MOVWF  3D
0079:  CALL   011
.................... LCD_Enable(); 
007A:  CALL   04D
.................... delay_ms(5); 
007B:  MOVLW  05
007C:  MOVWF  3A
007D:  CALL   038
.................... LCD_Enable(); 
007E:  CALL   04D
.................... delay_us(100); 
007F:  MOVLW  C7
0080:  MOVWF  77
0081:  DECFSZ 77,F
0082:  GOTO   081
0083:  GOTO   084
.................... LCD_Enable(); 
0084:  CALL   04D
.................... LCD_Send4Bit(0x02); 
0085:  MOVLW  02
0086:  MOVWF  3D
0087:  CALL   011
.................... LCD_Enable(); 
0088:  CALL   04D
.................... LCD_SendCommand( 0x28 );      // giao thuc 4 bit, hien thi 2 hang, ki tu 5x8 
0089:  MOVLW  28
008A:  MOVWF  3B
008B:  CALL   05A
.................... LCD_SendCommand( 0x0c);    // cho phep hien thi man hinh 
008C:  MOVLW  0C
008D:  MOVWF  3B
008E:  CALL   05A
.................... LCD_SendCommand( 0x06 );      // tang ID, khong dich khung hinh 
008F:  MOVLW  06
0090:  MOVWF  3B
0091:  CALL   05A
.................... LCD_SendCommand( 0x01 ); // xoa toan bo khung hinh 
0092:  MOVLW  01
0093:  MOVWF  3B
0094:  CALL   05A
.................... } 
0095:  BCF    0A.3
0096:  BCF    0A.4
0097:  GOTO   14B (RETURN)
.................... void LCD_Gotoxy(unsigned char x, unsigned char y) 
.................... { 
....................   unsigned char address; 
....................   if(!y) 
*
0113:  MOVF   38,F
0114:  BTFSS  03.2
0115:  GOTO   11A
....................   address = (0x80+x); 
0116:  MOVLW  80
0117:  ADDWF  37,W
0118:  MOVWF  39
....................   else 
0119:  GOTO   11D
....................   address = (0xC0+x); 
011A:  MOVLW  C0
011B:  ADDWF  37,W
011C:  MOVWF  39
....................   delay_us(1000); 
011D:  MOVLW  01
011E:  MOVWF  3A
011F:  CALL   038
....................   LCD_SendCommand(address); 
0120:  MOVF   39,W
0121:  MOVWF  3B
0122:  CALL   05A
....................   delay_ms(10); 
0123:  MOVLW  0A
0124:  MOVWF  3A
0125:  CALL   038
.................... } 
0126:  BCF    0A.3
0127:  BCF    0A.4
0128:  GOTO   171 (RETURN)
.................... // Ham Xoa Man Hinh LCD 
.................... void LCD_Clear() 
.................... { 
....................   LCD_SendCommand(0x01);   
*
010A:  MOVLW  01
010B:  MOVWF  3B
010C:  CALL   05A
....................   delay_ms(10); 
010D:  MOVLW  0A
010E:  MOVWF  3A
010F:  CALL   038
.................... } 
0110:  BCF    0A.3
0111:  BCF    0A.4
0112:  GOTO   164 (RETURN)
.................... // Ham Gui 1 Ki Tu Len LCD 
....................  void LCD_PutChar ( unsigned char Data ) 
.................... { 
....................  output_high(LCD_RS); 
*
0100:  BSF    09.0
....................  LCD_SendCommand( Data ); 
0101:  MOVF   3A,W
0102:  MOVWF  3B
0103:  CALL   05A
....................  output_low(LCD_RS); 
0104:  BCF    09.0
.................... } 
.................... void LCD_Puts (char *s) 
.................... { 
....................    while (*s) 
....................    { 
*
00EB:  MOVF   38,W
00EC:  MOVWF  7A
00ED:  MOVF   37,W
00EE:  MOVWF  04
00EF:  BCF    03.7
00F0:  BTFSC  7A.0
00F1:  BSF    03.7
00F2:  MOVF   00,F
00F3:  BTFSC  03.2
00F4:  GOTO   109
....................       LCD_PutChar(*s); 
00F5:  MOVF   38,W
00F6:  MOVWF  7A
00F7:  MOVF   37,W
00F8:  MOVWF  04
00F9:  BCF    03.7
00FA:  BTFSC  7A.0
00FB:  BSF    03.7
00FC:  MOVF   00,W
00FD:  MOVWF  39
00FE:  MOVF   39,W
00FF:  MOVWF  3A
....................       s++; 
*
0105:  INCF   37,F
0106:  BTFSC  03.2
0107:  INCF   38,F
....................    } 
0108:  GOTO   0EB
.................... } 
0109:  RETURN
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... #include "timer.c" 
.................... #ifndef __TIMER_ 
.................... #define __TIMER_ 
.................... void timer0_config() 
.................... { 
.................... ////////////////////////////////////////////////////////////// 
.................... //              Cau Hinh Timer 0                     // 
.................... //         T_tm0: Chu ky xung dem cua timer 0            // 
.................... //         T_osc: Chu ky dao dong su dung cho chip         // 
.................... ////////////////////////////////////////////////////////////// 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1|RTCC_8_bit);      //   T_tm0=T_osc*4*1 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_2|RTCC_8_bit);      //   T_tm0=T_osc*4*2 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_4|RTCC_8_bit);      //   T_tm0=T_osc*4*4 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_8|RTCC_8_bit);      //   T_tm0=T_osc*4*8 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_16|RTCC_8_bit);      //   T_tm0=T_osc*4*16 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_32|RTCC_8_bit);      //   T_tm0=T_osc*4*32 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_64|RTCC_8_bit);      //   T_tm0=T_osc*4*64 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_128|RTCC_8_bit);      //   T_tm0=T_osc*4*128 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256|RTCC_8_bit);      //   T_tm0=T_osc*4*256 
.................... ///setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_1|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 1 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_2|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 2 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_4|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 4 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_8|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 8 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_16|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 16 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_32|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 32 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_64|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 64 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_128|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 128 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_256|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 256 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_1|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 1 suon xuong tai chan PIN_A4 (T0CKI)    
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_2|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 2 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_4|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 4 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_8|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 8 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_16|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 16 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_32|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 32 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_64|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 64 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_128|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 128 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_256|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 256 suon xuong tai chan PIN_A4 (T0CKI) 
....................  
.................... /******************Thiet lap ngat timer*********************/ 
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
.................... //                   NGAT TRAN TIMER 0            // 
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
.................... //enable_interrupts(INT_TIMER0);   //Cho phep ngat tran timer0 hoat dong 
.................... //disable_interrupts(INT_TIMER0);   //Khong cho phep ngat tran timer0 hoat dong (mac dinh) 
....................  
.................... } 
.................... void timer1_config() 
.................... { 
.................... //setup_timer_1(T1_INTERNAL|T1_DIV_BY_1);               // 
.................... //setup_timer_1(T1_INTERNAL|T1_DIV_BY_2);               // 
.................... //setup_timer_1(T1_INTERNAL|T1_DIV_BY_4);               // 
.................... setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);               // 
.................... //setup_timer_1(T1_EXTERNAL|T1_DIV_BY_1);               // 
.................... //setup_timer_1(T1_EXTERNAL|T1_CLK_OUT);               // 
.................... //setup_timer_1(T1_EXTERNAL|T1_EXTERNAL_SYNC);            // 
.................... //setup_timer_1(T1_EXTERNAL|T1_CLK_OUT|T1_EXTERNAL_SYNC);   // 
.................... //setup_timer_1(T1_DISABLED);                           // 
....................  
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
.................... //               NGAT TRAN TIMER 1            // 
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
.................... //enable_interrupts(INT_TIMER1);   //Cho phep ngat tran timer1 hoat dong 
.................... disable_interrupts(INT_TIMER1);   //Khong cho phep ngat tran timer1 hoat dong (mac dinh) 
....................  
.................... } 
.................... void timer2_config() 
.................... { 
.................... //############################################################ 
.................... //              Cau Hinh Timer 2                     // 
.................... //         Over_Period: 1-255                        // 
.................... //         Int_Period : 1-16                        // 
.................... //         T_Ov   :Chu ky tran bo dem timer2            // 
.................... //         T_In   :Chu ky xay ra ngat tran timer 0      // 
.................... //         T_osc   : Chu ky dao dong su dung cho chip      // 
.................... //############################################################ 
....................  
.................... //setup_timer_2(T2_DIV_BY_1,Over_Period,Int_Period);      //   T_ov=T_osc*4*1*(1+Over_Period)   ;   T_In=T_osc*4*1*(1+Over_Period)*Int_Period 
.................... //setup_timer_2(T2_DIV_BY_4,Over_Period,Int_Period);      //   T_ov=T_osc*4*4*(1+Over_Period)   ;   T_In=T_osc*4*4*(1+Over_Period)*Int_Period 
.................... //setup_timer_2(T2_DIV_BY_16,Over_Period,Int_Period);      //   T_ov=T_osc*4*16*(1+Over_Period)   ;   T_In=T_osc*4*16*(1+Over_Period)*Int_Period 
.................... //setup_timer_2(T2_DISABLED,0,1);                      //   Khong su dung bo dem timer2 
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
.................... //               NGAT TRAN TIMER 2            // 
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
....................  
.................... //enable_interrupts(INT_TIMER2);   //Cho phep ngat tran timer2 hoat dong 
.................... disable_interrupts(INT_TIMER2);   //Khong cho phep ngat tran timer2 hoat dong (mac dinh) 
.................... } 
.................... #endif 
....................  
.................... void main() 
.................... {   
*
0010:  DATA 00,00
*
0129:  CLRF   04
012A:  BCF    03.7
012B:  MOVLW  1F
012C:  ANDWF  03,F
012D:  MOVLW  FF
012E:  MOVWF  20
012F:  CLRF   22
0130:  CLRF   21
0131:  BSF    03.5
0132:  BSF    1F.0
0133:  BSF    1F.1
0134:  BSF    1F.2
0135:  BCF    1F.3
0136:  MOVLW  07
0137:  MOVWF  1C
....................    unsigned char str[20]; 
....................    setup_timer_2(T2_DIV_BY_16,255,1); 
0138:  MOVLW  00
0139:  MOVWF  78
013A:  IORLW  06
013B:  BCF    03.5
013C:  MOVWF  12
013D:  MOVLW  FF
013E:  BSF    03.5
013F:  MOVWF  12
....................    set_pwm1_duty(0); 
0140:  BCF    03.5
0141:  CLRF   15
....................    setup_ccp1(CCP_PWM); 
0142:  BCF    20.2
0143:  MOVF   20,W
0144:  BSF    03.5
0145:  MOVWF  07
0146:  BCF    03.5
0147:  BCF    07.2
0148:  MOVLW  0C
0149:  MOVWF  17
....................    LCD_Init(); 
014A:  GOTO   067
....................    sprintf(str,"DEMO PWM"); 
014B:  CLRF   22
014C:  MOVLW  23
014D:  MOVWF  21
014E:  MOVLW  04
014F:  BSF    03.6
0150:  MOVWF  0D
0151:  MOVLW  00
0152:  MOVWF  0F
0153:  BCF    03.6
0154:  CALL   0A5
....................    delay_ms(10); 
0155:  MOVLW  0A
0156:  MOVWF  3A
0157:  CALL   038
....................    LCD_Puts(str); 
0158:  CLRF   38
0159:  MOVLW  23
015A:  MOVWF  37
015B:  CALL   0EB
....................    delay_ms(1000); 
015C:  MOVLW  04
015D:  MOVWF  37
015E:  MOVLW  FA
015F:  MOVWF  3A
0160:  CALL   038
0161:  DECFSZ 37,F
0162:  GOTO   15E
....................    LCD_Clear(); 
0163:  GOTO   10A
....................    sprintf(str,"BanLinhKien.Vn"); 
0164:  CLRF   22
0165:  MOVLW  23
0166:  MOVWF  21
0167:  MOVLW  09
0168:  BSF    03.6
0169:  MOVWF  0D
016A:  MOVLW  00
016B:  MOVWF  0F
016C:  BCF    03.6
016D:  CALL   0A5
....................    LCD_Gotoxy(0,0); 
016E:  CLRF   37
016F:  CLRF   38
0170:  GOTO   113
....................    LCD_Puts(str); 
0171:  CLRF   38
0172:  MOVLW  23
0173:  MOVWF  37
0174:  CALL   0EB
....................    setup_timer_2(T2_DIV_BY_1,59,1); 
0175:  MOVLW  00
0176:  MOVWF  78
0177:  IORLW  04
0178:  MOVWF  12
0179:  MOVLW  3B
017A:  BSF    03.5
017B:  MOVWF  12
....................    setup_ccp1(CCP_PWM); 
017C:  BCF    03.5
017D:  BCF    20.2
017E:  MOVF   20,W
017F:  BSF    03.5
0180:  MOVWF  07
0181:  BCF    03.5
0182:  BCF    07.2
0183:  MOVLW  0C
0184:  MOVWF  17
....................    set_pwm1_duty(72); 
0185:  MOVLW  48
0186:  MOVWF  15
....................    while(TRUE) 
....................    { 
....................    } 
0187:  GOTO   187
.................... }                 
0188:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
