CCS PCM C Compiler, Version 5.015, 5967               24-Apr-22 10:39

               Filename:   D:\STUDY\PIC\10-PWM\ccs\main.lst

               ROM used:   346 words (4%)
                           Largest free fragment is 2048
               RAM used:   29 (8%) at main() level
                           36 (10%) worst case
               Stack used: 3 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   11F
0003:  NOP
.................... #include <main.h> 
.................... /** 
....................   ****************************************************************************** 
....................   * Ten Tep      :        main.h 
....................   * Tac Gia      :        Nguyen Quy Nhat 
....................   * Cong Ty      :        MinhHaGroup 
....................   * Website      :        BanLinhKien.Vn 
....................   * Phien Ban    :        V1.0.0 
....................   * Ngay         :        31-08-2012 
....................   * Tom Tat      :        Khai bao cac thu vien. 
....................   *                       Cau hinh mot so chuc nang cho trinh bien dich. 
....................   *                       Cau hinh mot so chuc nang cho CHIP. 
....................   *                       Dinh nghia I/O. 
....................   *            
....................   * 
....................   ****************************************************************************** 
....................   * Chu Y      :           
....................   *                           
....................   *                       
....................   ****************************************************************************** 
....................   */ 
.................... #ifndef _MAIN_ 
.................... #define _MAIN_ 
.................... /***************KHAI BAO CAC THU VIEN*****************/    
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA D4,22
0005:  DATA 53,2A
0006:  DATA 20,28
0007:  DATA D7,26
0008:  DATA 00,00
*
0090:  MOVF   21,W
0091:  MOVWF  04
0092:  BCF    03.7
0093:  BTFSC  22.0
0094:  BSF    03.7
0095:  MOVF   3A,W
0096:  MOVWF  00
0097:  INCF   04,F
0098:  CLRF   00
0099:  INCF   21,F
009A:  BTFSC  03.2
009B:  INCF   22,F
009C:  RETURN
009D:  MOVF   0B,W
009E:  MOVWF  37
009F:  BCF    0B.7
00A0:  BSF    03.5
00A1:  BSF    03.6
00A2:  BSF    0C.7
00A3:  BSF    0C.0
00A4:  NOP
00A5:  NOP
00A6:  BCF    03.5
00A7:  BCF    03.6
00A8:  BTFSC  37.7
00A9:  BSF    0B.7
00AA:  BSF    03.6
00AB:  MOVF   0C,W
00AC:  ANDLW  7F
00AD:  BTFSC  03.2
00AE:  GOTO   0F1
00AF:  BCF    03.6
00B0:  MOVWF  37
00B1:  BSF    03.6
00B2:  MOVF   0D,W
00B3:  BCF    03.6
00B4:  MOVWF  38
00B5:  BSF    03.6
00B6:  MOVF   0F,W
00B7:  BCF    03.6
00B8:  MOVWF  39
00B9:  MOVF   37,W
00BA:  MOVWF  3A
00BB:  CALL   090
00BC:  MOVF   38,W
00BD:  BSF    03.6
00BE:  MOVWF  0D
00BF:  BCF    03.6
00C0:  MOVF   39,W
00C1:  BSF    03.6
00C2:  MOVWF  0F
00C3:  BCF    03.6
00C4:  MOVF   0B,W
00C5:  MOVWF  3A
00C6:  BCF    0B.7
00C7:  BSF    03.5
00C8:  BSF    03.6
00C9:  BSF    0C.7
00CA:  BSF    0C.0
00CB:  NOP
00CC:  NOP
00CD:  BCF    03.5
00CE:  BCF    03.6
00CF:  BTFSC  3A.7
00D0:  BSF    0B.7
00D1:  BSF    03.6
00D2:  RLF    0C,W
00D3:  RLF    0E,W
00D4:  ANDLW  7F
00D5:  BTFSC  03.2
00D6:  GOTO   0F1
00D7:  BCF    03.6
00D8:  MOVWF  37
00D9:  BSF    03.6
00DA:  MOVF   0D,W
00DB:  BCF    03.6
00DC:  MOVWF  38
00DD:  BSF    03.6
00DE:  MOVF   0F,W
00DF:  BCF    03.6
00E0:  MOVWF  39
00E1:  MOVF   37,W
00E2:  MOVWF  3A
00E3:  CALL   090
00E4:  MOVF   38,W
00E5:  BSF    03.6
00E6:  MOVWF  0D
00E7:  BCF    03.6
00E8:  MOVF   39,W
00E9:  BSF    03.6
00EA:  MOVWF  0F
00EB:  INCF   0D,F
00EC:  BTFSC  03.2
00ED:  INCF   0F,F
00EE:  BCF    03.6
00EF:  GOTO   09D
00F0:  BSF    03.6
00F1:  BCF    03.6
00F2:  BCF    0A.3
00F3:  BCF    0A.4
00F4:  GOTO   13A (RETURN)
....................  
.................... #list 
....................  
.................... /**************KHAI BAO CAU HINH FUSE BIT************/ 
.................... /////////////////////////////////////////////////////// 
.................... //                                                   // 
.................... // Voi moi muc phai chon mot trong danh sach dua ra  // 
.................... //                                                   // 
.................... /////////////////////////////////////////////////////// 
....................  
.................... //_________________POINTER AND ADC____________________ 
....................  
.................... #device *=16 adc=10          //   su dung con tro 16 bit, bo chuyen doi ADC 10 bit 
.................... //#device *=16 adc=8          //  su dung con tro 16 bit, bo chuyen doi ADC 8 bit 
....................  
.................... //__________________WATCH DOG TIMER___________________ 
....................  
.................... #FUSES NOWDT                   //   khong su dung bo Watch Dog Timer 
....................  
.................... //__________________HIGH SPEED OSC____________________ 
....................  
.................... //#FUSES LP                        // Su dung nguon dao dong tan so thap < 200 khz 
.................... //#FUSES XT                        // Dao dong thach anh <= 4mhz voi PCM/PCH , 3mhz to 10 mhz voi PCD 
.................... //#FUSES RC                        // Dao dong RC voi CLKOUT 
.................... #FUSES HS                      //Dao dong tan so cao (> 4mhz voi PCM/PCH) (>10mhz voi PCD) 
....................  
.................... //__________________POWER UP TIMER____________________ 
....................  
.................... #FUSES NOPUT                    //Khong su dung Power Up Timer 
.................... //#FUSES PUT                        //Su dung Power Up Timer 
.................... //__________________BROWN OUT_________________________ 
....................  
.................... #FUSES NOBROWNOUT               //Khong reset chip khi BrownOut 
.................... //#FUSES BROWNOUT                   //Reset chi khi co BrownOut 
.................... //______________LOW VOLTAGE PROGRAM___________________ 
....................  
.................... #FUSES NOLVP                    //No low voltage programing, B3(PIC16) or B5(PIC18) used for I/O 
.................... //#FUSES LVP                        //Low Voltage Programming on B3(PIC16) or B5(PIC18) 
.................... //______________CODE PROTECED EEPROM__________________ 
....................  
.................... #FUSES NOCPD                    //Khong bao ve du lieu EEPROM 
.................... //#FUSES CPD                        //Dung che do bao ve du lieu EEPROM 
....................  
.................... //_____________PROGRAM WRITE PROTECED_________________ 
....................  
.................... //#FUSES WRT                      //Program Memory Write Protected 
.................... //#FUSES WRT_50%                  //Lower half of Program Memory is Write Protected 
.................... //#FUSES WRT_5%                   //Lower 255 bytes of Program Memory is Write Protected 
.................... #FUSES NOWRT                    //Program memory not write protected 
....................  
.................... //_____________ENABLE DEBUG MODE FOR ICD______________ 
....................  
.................... //#device ICD=TRUE            // Kich hoat chuc nang DEBUG ICD Integrated Chip Debugging 
.................... //________________DEBUG FOR ICD_______________________ 
....................  
.................... #FUSES NODEBUG                  //Khong su dung che do Debug voi ICD 
.................... //#FUSES DEBUG                      // Su dung che do Debug voi ICD 
....................  
.................... //___________CODE PROTECED FROM READING_______________ 
.................... #FUSES NOPROTECT                // Cho phep doc lai Code 
.................... //#FUSES PROTECT                    // Khong cho phep doc lai code  
....................  
.................... //___________________CLOCK____________________________ 
....................  
.................... #use delay(clock=24000000)            // Su dung tan so 20Mhz, khong reset watch dog khi goi den ham delay. 
*
0030:  MOVLW  38
0031:  MOVWF  04
0032:  BCF    03.7
0033:  MOVF   00,W
0034:  BTFSC  03.2
0035:  GOTO   044
0036:  MOVLW  07
0037:  MOVWF  78
0038:  CLRF   77
0039:  DECFSZ 77,F
003A:  GOTO   039
003B:  DECFSZ 78,F
003C:  GOTO   038
003D:  MOVLW  C7
003E:  MOVWF  77
003F:  DECFSZ 77,F
0040:  GOTO   03F
0041:  NOP
0042:  DECFSZ 00,F
0043:  GOTO   036
0044:  RETURN
.................... //#use delay(clock=20000000,RESTART_WDT)   // Su dung tan so 20Mhz, reset watch dog khi goi den ham delay. 
....................  
.................... //________________FAST_STANDAR I/O PORTA___________________ 
....................  
.................... //#use FAST_IO(A)          // Thiet lap che do fast I/O cho PORTA, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... #use STANDARD_IO(A)     // Thiet lap che do chuan I/O cho PORTA, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(A)       // 
....................  
.................... //________________FAST_STANDAR I/O PORTB___________________ 
....................  
.................... //#use FAST_IO(B)          // Thiet lap che do fast I/O cho PORTB, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... #use STANDARD_IO(B)     // Thiet lap che do chuan I/O cho PORTB, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(B)       // 
....................  
.................... //________________FAST_STANDAR I/O PORTC____________________ 
....................  
.................... //#use FAST_IO(C)          // Thiet lap che do fast I/O cho PORTC, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... #use STANDARD_IO(C)     // Thiet lap che do chuan I/O cho PORTC, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(C)       // 
....................  
.................... //________________FAST_STANDAR I/O PORTD_____________________ 
....................  
.................... #use FAST_IO(D)          // Thiet lap che do fast I/O cho PORTD, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... //#use STANDARD_IO(D)     // Thiet lap che do chuan I/O cho PORTD, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(D)       // 
....................  
.................... //_______________FAST_STANDAR I/O PORTE___________________ 
....................  
.................... #use FAST_IO(E)        // Thiet lap che do fast I/O cho PORTE, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... //#use STANDARD_IO(E)     // Thiet lap che do chuan I/O cho PORTE, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(E)       // 
....................  
....................  
.................... //________________________CASE_____________________________ 
....................  
....................  
.................... //#CASE               // Phan biet chu hoa va chu thuong trong khi lap trinh code 
....................  
....................  
.................... /************** DINH NGHIA CAC CHAN I/O ************/ 
....................  
.................... //////////////////////////////////////////////////////// 
.................... //   Xoa chu thich cho cac chuc nang I/O su dung       // 
.................... //  Dinh nghia lai cac chan cho phu hop voi phan cung //  
.................... //////////////////////////////////////////////////////// 
....................  
.................... //______________________I/O LCD____________________________ 
.................... #define LCD_RS PIN_E0                         
.................... #define LCD_RW PIN_E1 
.................... #define LCD_EN PIN_E2 
.................... #define LCD_D4 PIN_D4                  
.................... #define LCD_D5 PIN_D5 
.................... #define LCD_D6 PIN_D6 
.................... #define LCD_D7 PIN_D7  
.................... #endif 
....................  
.................... #include <var.h> 
.................... #ifndef _VAR_ 
.................... #define _VAR_ 
.................... #endif                                           
....................  
.................... #include "lcd.c" 
.................... /** 
....................   ****************************************************************************** 
....................   * Ten Tep      :        lcd_16x2.c 
....................   * Tac Gia      :        Nguyen Quy Nhat 
....................   * Cong Ty      :         MinhHaGroup 
....................   *   Website    :         BanLinhKien.Vn 
....................   * Phien Ban   :         V1.0.0 
....................   * Ngay         :       31-07-2012 
....................   * Tom Tat   :     Dinh nghia cac ham dieu khien LCD 16x2. 
....................   *            
....................   * 
....................   ****************************************************************************** 
....................   * Chu Y      : 
....................   *                       
....................   ****************************************************************************** 
....................   */ 
.................... //Tao Xung 
....................  void LCD_Enable(void) 
.................... { 
....................  output_high(LCD_EN); 
0045:  BSF    09.2
....................  delay_us(3); 
0046:  MOVLW  05
0047:  MOVWF  77
0048:  DECFSZ 77,F
0049:  GOTO   048
004A:  GOTO   04B
....................  output_low(LCD_EN); 
004B:  BCF    09.2
....................  delay_us(50);  
004C:  MOVLW  63
004D:  MOVWF  77
004E:  DECFSZ 77,F
004F:  GOTO   04E
0050:  GOTO   051
0051:  RETURN
.................... } 
.................... //Ham Gui 4 Bit Du Lieu Ra LCD 
....................  void LCD_Send4Bit( unsigned char Data ) 
.................... { 
....................  output_bit(LCD_D4,Data&0x01); 
*
0009:  BTFSC  3D.0
000A:  GOTO   00D
000B:  BCF    08.4
000C:  GOTO   00E
000D:  BSF    08.4
....................  output_bit(LCD_D5,(Data>>1)&1); 
000E:  BCF    03.0
000F:  RRF    3D,W
0010:  ANDLW  01
0011:  BTFSS  03.2
0012:  GOTO   015
0013:  BCF    08.5
0014:  GOTO   016
0015:  BSF    08.5
....................  output_bit(LCD_D6,(Data>>2)&1); 
0016:  RRF    3D,W
0017:  MOVWF  77
0018:  RRF    77,F
0019:  MOVLW  3F
001A:  ANDWF  77,F
001B:  MOVF   77,W
001C:  ANDLW  01
001D:  BTFSS  03.2
001E:  GOTO   021
001F:  BCF    08.6
0020:  GOTO   022
0021:  BSF    08.6
....................  output_bit(LCD_D7,(Data>>3)&1); 
0022:  RRF    3D,W
0023:  MOVWF  77
0024:  RRF    77,F
0025:  RRF    77,F
0026:  MOVLW  1F
0027:  ANDWF  77,F
0028:  MOVF   77,W
0029:  ANDLW  01
002A:  BTFSS  03.2
002B:  GOTO   02E
002C:  BCF    08.7
002D:  GOTO   02F
002E:  BSF    08.7
002F:  RETURN
.................... } 
.................... // Ham Gui 1 Lenh Cho LCD 
....................  void LCD_SendCommand (unsigned char command ) 
.................... { 
.................... LCD_Send4Bit  ( command >>4 );/* Gui 4 bit cao */ 
*
0052:  SWAPF  3B,W
0053:  MOVWF  3C
0054:  MOVLW  0F
0055:  ANDWF  3C,F
0056:  MOVF   3C,W
0057:  MOVWF  3D
0058:  CALL   009
.................... LCD_Enable () ; 
0059:  CALL   045
.................... LCD_Send4Bit  ( command  );      /* Gui 4 bit thap*/ 
005A:  MOVF   3B,W
005B:  MOVWF  3D
005C:  CALL   009
.................... LCD_Enable () ; 
005D:  CALL   045
005E:  RETURN
.................... } 
.................... // Ham Khoi Tao LCD 
....................  void LCD_Init ( void ) 
.................... { 
.................... output_drive(LCD_D4); 
005F:  BSF    03.5
0060:  BCF    08.4
.................... output_drive(LCD_D5); 
0061:  BCF    08.5
.................... output_drive(LCD_D6); 
0062:  BCF    08.6
.................... output_drive(LCD_D7); 
0063:  BCF    08.7
.................... output_drive(LCD_EN); 
0064:  BCF    09.2
.................... output_drive(LCD_RS); 
0065:  BCF    09.0
.................... output_drive(LCD_RW); 
0066:  BCF    09.1
.................... LCD_Send4Bit(0x00); 
0067:  BCF    03.5
0068:  CLRF   3D
0069:  CALL   009
.................... delay_ms(20); 
006A:  MOVLW  14
006B:  MOVWF  38
006C:  CALL   030
.................... output_low(LCD_RS); 
006D:  BCF    09.0
.................... output_low(LCD_RW); 
006E:  BCF    09.1
.................... LCD_Send4Bit(0x03); 
006F:  MOVLW  03
0070:  MOVWF  3D
0071:  CALL   009
.................... LCD_Enable(); 
0072:  CALL   045
.................... delay_ms(5); 
0073:  MOVLW  05
0074:  MOVWF  38
0075:  CALL   030
.................... LCD_Enable(); 
0076:  CALL   045
.................... delay_us(100); 
0077:  MOVLW  C7
0078:  MOVWF  77
0079:  DECFSZ 77,F
007A:  GOTO   079
007B:  GOTO   07C
.................... LCD_Enable(); 
007C:  CALL   045
.................... LCD_Send4Bit(0x02); 
007D:  MOVLW  02
007E:  MOVWF  3D
007F:  CALL   009
.................... LCD_Enable(); 
0080:  CALL   045
.................... LCD_SendCommand( 0x28 );      // giao thuc 4 bit, hien thi 2 hang, ki tu 5x8 
0081:  MOVLW  28
0082:  MOVWF  3B
0083:  CALL   052
.................... LCD_SendCommand( 0x0c);    // cho phep hien thi man hinh 
0084:  MOVLW  0C
0085:  MOVWF  3B
0086:  CALL   052
.................... LCD_SendCommand( 0x06 );      // tang ID, khong dich khung hinh 
0087:  MOVLW  06
0088:  MOVWF  3B
0089:  CALL   052
.................... LCD_SendCommand( 0x01 ); // xoa toan bo khung hinh 
008A:  MOVLW  01
008B:  MOVWF  3B
008C:  CALL   052
008D:  BCF    0A.3
008E:  BCF    0A.4
008F:  GOTO   130 (RETURN)
.................... } 
.................... void LCD_Gotoxy(unsigned char x, unsigned char y) 
.................... { 
....................   unsigned char address; 
....................   if(!y) 
....................   address = (0x80+x); 
....................   else 
....................   address = (0xC0+x); 
....................   delay_us(1000); 
....................   LCD_SendCommand(address); 
....................   delay_ms(10); 
.................... } 
.................... // Ham Xoa Man Hinh LCD 
.................... void LCD_Clear() 
.................... { 
....................   LCD_SendCommand(0x01);   
*
0116:  MOVLW  01
0117:  MOVWF  3B
0118:  CALL   052
....................   delay_ms(10); 
0119:  MOVLW  0A
011A:  MOVWF  38
011B:  CALL   030
011C:  BCF    0A.3
011D:  BCF    0A.4
011E:  GOTO   146 (RETURN)
.................... } 
.................... // Ham Gui 1 Ki Tu Len LCD 
....................  void LCD_PutChar ( unsigned char Data ) 
.................... { 
....................  output_high(LCD_RS); 
*
010A:  BSF    09.0
....................  LCD_SendCommand( Data ); 
010B:  MOVF   3A,W
010C:  MOVWF  3B
010D:  CALL   052
....................  output_low(LCD_RS); 
010E:  BCF    09.0
.................... } 
.................... void LCD_Puts (char *s) 
.................... { 
....................    while (*s) 
*
00F5:  MOVF   38,W
00F6:  MOVWF  7A
00F7:  MOVF   37,W
00F8:  MOVWF  04
00F9:  BCF    03.7
00FA:  BTFSC  7A.0
00FB:  BSF    03.7
00FC:  MOVF   00,F
00FD:  BTFSC  03.2
00FE:  GOTO   113
....................    { 
....................       LCD_PutChar(*s); 
00FF:  MOVF   38,W
0100:  MOVWF  7A
0101:  MOVF   37,W
0102:  MOVWF  04
0103:  BCF    03.7
0104:  BTFSC  7A.0
0105:  BSF    03.7
0106:  MOVF   00,W
0107:  MOVWF  39
0108:  MOVF   39,W
0109:  MOVWF  3A
....................       s++; 
*
010F:  INCF   37,F
0110:  BTFSC  03.2
0111:  INCF   38,F
0112:  GOTO   0F5
....................    } 
0113:  BCF    0A.3
0114:  BCF    0A.4
0115:  GOTO   13E (RETURN)
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... #include "timer.c" 
.................... #ifndef __TIMER_ 
.................... #define __TIMER_ 
.................... void timer0_config() 
.................... { 
.................... ////////////////////////////////////////////////////////////// 
.................... //              Cau Hinh Timer 0                     // 
.................... //         T_tm0: Chu ky xung dem cua timer 0            // 
.................... //         T_osc: Chu ky dao dong su dung cho chip         // 
.................... ////////////////////////////////////////////////////////////// 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1|RTCC_8_bit);      //   T_tm0=T_osc*4*1 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_2|RTCC_8_bit);      //   T_tm0=T_osc*4*2 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_4|RTCC_8_bit);      //   T_tm0=T_osc*4*4 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_8|RTCC_8_bit);      //   T_tm0=T_osc*4*8 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_16|RTCC_8_bit);      //   T_tm0=T_osc*4*16 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_32|RTCC_8_bit);      //   T_tm0=T_osc*4*32 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_64|RTCC_8_bit);      //   T_tm0=T_osc*4*64 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_128|RTCC_8_bit);      //   T_tm0=T_osc*4*128 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256|RTCC_8_bit);      //   T_tm0=T_osc*4*256 
.................... ///setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_1|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 1 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_2|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 2 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_4|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 4 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_8|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 8 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_16|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 16 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_32|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 32 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_64|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 64 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_128|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 128 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_256|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 256 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_1|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 1 suon xuong tai chan PIN_A4 (T0CKI)    
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_2|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 2 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_4|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 4 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_8|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 8 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_16|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 16 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_32|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 32 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_64|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 64 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_128|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 128 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_256|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 256 suon xuong tai chan PIN_A4 (T0CKI) 
....................  
.................... /******************Thiet lap ngat timer*********************/ 
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
.................... //                   NGAT TRAN TIMER 0            // 
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
.................... //enable_interrupts(INT_TIMER0);   //Cho phep ngat tran timer0 hoat dong 
.................... //disable_interrupts(INT_TIMER0);   //Khong cho phep ngat tran timer0 hoat dong (mac dinh) 
....................  
.................... } 
.................... void timer1_config() 
.................... { 
.................... //setup_timer_1(T1_INTERNAL|T1_DIV_BY_1);               // 
.................... //setup_timer_1(T1_INTERNAL|T1_DIV_BY_2);               // 
.................... //setup_timer_1(T1_INTERNAL|T1_DIV_BY_4);               // 
.................... setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);               // 
.................... //setup_timer_1(T1_EXTERNAL|T1_DIV_BY_1);               // 
.................... //setup_timer_1(T1_EXTERNAL|T1_CLK_OUT);               // 
.................... //setup_timer_1(T1_EXTERNAL|T1_EXTERNAL_SYNC);            // 
.................... //setup_timer_1(T1_EXTERNAL|T1_CLK_OUT|T1_EXTERNAL_SYNC);   // 
.................... //setup_timer_1(T1_DISABLED);                           // 
....................  
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
.................... //               NGAT TRAN TIMER 1            // 
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
.................... //enable_interrupts(INT_TIMER1);   //Cho phep ngat tran timer1 hoat dong 
.................... disable_interrupts(INT_TIMER1);   //Khong cho phep ngat tran timer1 hoat dong (mac dinh) 
....................  
.................... } 
.................... void timer2_config() 
.................... { 
.................... //############################################################ 
.................... //              Cau Hinh Timer 2                     // 
.................... //         Over_Period: 1-255                        // 
.................... //         Int_Period : 1-16                        // 
.................... //         T_Ov   :Chu ky tran bo dem timer2            // 
.................... //         T_In   :Chu ky xay ra ngat tran timer 0      // 
.................... //         T_osc   : Chu ky dao dong su dung cho chip      // 
.................... //############################################################ 
....................  
.................... //setup_timer_2(T2_DIV_BY_1,Over_Period,Int_Period);      //   T_ov=T_osc*4*1*(1+Over_Period)   ;   T_In=T_osc*4*1*(1+Over_Period)*Int_Period 
.................... //setup_timer_2(T2_DIV_BY_4,Over_Period,Int_Period);      //   T_ov=T_osc*4*4*(1+Over_Period)   ;   T_In=T_osc*4*4*(1+Over_Period)*Int_Period 
.................... //setup_timer_2(T2_DIV_BY_16,Over_Period,Int_Period);      //   T_ov=T_osc*4*16*(1+Over_Period)   ;   T_In=T_osc*4*16*(1+Over_Period)*Int_Period 
.................... //setup_timer_2(T2_DISABLED,0,1);                      //   Khong su dung bo dem timer2 
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
.................... //               NGAT TRAN TIMER 2            // 
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
....................  
.................... //enable_interrupts(INT_TIMER2);   //Cho phep ngat tran timer2 hoat dong 
.................... disable_interrupts(INT_TIMER2);   //Khong cho phep ngat tran timer2 hoat dong (mac dinh) 
.................... } 
.................... #endif 
....................  
.................... void main() 
*
011F:  MOVF   03,W
0120:  ANDLW  1F
0121:  MOVWF  03
0122:  MOVLW  FF
0123:  MOVWF  20
0124:  CLRF   22
0125:  CLRF   21
0126:  BSF    03.5
0127:  BSF    1F.0
0128:  BSF    1F.1
0129:  BSF    1F.2
012A:  BCF    1F.3
012B:  MOVLW  07
012C:  MOVWF  1C
012D:  BCF    03.7
.................... {   
....................    unsigned char str[20]; 
....................    LCD_Init(); 
012E:  BCF    03.5
012F:  GOTO   05F
....................    sprintf(str,"TEST PWM"); 
0130:  CLRF   22
0131:  MOVLW  23
0132:  MOVWF  21
0133:  MOVLW  04
0134:  BSF    03.6
0135:  MOVWF  0D
0136:  MOVLW  00
0137:  MOVWF  0F
0138:  BCF    03.6
0139:  GOTO   09D
....................    LCD_Puts(str); 
013A:  CLRF   38
013B:  MOVLW  23
013C:  MOVWF  37
013D:  GOTO   0F5
....................    delay_ms(1000); 
013E:  MOVLW  04
013F:  MOVWF  37
0140:  MOVLW  FA
0141:  MOVWF  38
0142:  CALL   030
0143:  DECFSZ 37,F
0144:  GOTO   140
....................    LCD_Clear(); 
0145:  GOTO   116
....................    setup_timer_2(T2_DIV_BY_1,59,1); 
0146:  MOVLW  00
0147:  MOVWF  78
0148:  IORLW  04
0149:  MOVWF  12
014A:  MOVLW  3B
014B:  BSF    03.5
014C:  MOVWF  12
....................    setup_ccp1(CCP_PWM); 
014D:  BCF    03.5
014E:  BCF    20.2
014F:  MOVF   20,W
0150:  BSF    03.5
0151:  MOVWF  07
0152:  BCF    03.5
0153:  BCF    07.2
0154:  MOVLW  0C
0155:  MOVWF  17
....................    set_pwm1_duty(72); 
0156:  MOVLW  48
0157:  MOVWF  15
....................    while(TRUE) 
....................    { 
0158:  GOTO   158
....................    } 
.................... }                 
....................  
0159:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
