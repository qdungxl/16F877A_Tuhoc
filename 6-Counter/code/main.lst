CCS PCM C Compiler, Version 4.114, 93460303               05-Oct-12 23:24

               Filename: D:\Company\Project\Dien Dan\PIC\Bai 11. Counter\code\main.lst

               ROM used: 578 words (7%)
                         Largest free fragment is 2048
               RAM used: 29 (8%) at main() level
                         36 (10%) worst case
               Stack:    3 locations

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1D7
0003:  NOP
.................... #include <main.h> 
.................... /** 
....................   ****************************************************************************** 
....................   * Ten Tep      :        main.h 
....................   * Tac Gia      :        Nguyen Quy Nhat 
....................   * Cong Ty      :        MinhHaGroup 
....................   * Website      :        BanLinhKien.Vn 
....................   * Phien Ban    :        V1.0.0 
....................   * Ngay         :        31-08-2012 
....................   * Tom Tat      :        Khai bao cac thu vien. 
....................   *                       Cau hinh mot so chuc nang cho trinh bien dich. 
....................   *                       Cau hinh mot so chuc nang cho CHIP. 
....................   *                       Dinh nghia I/O. 
....................   *            
....................   * 
....................   ****************************************************************************** 
....................   * Chu Y      :           
....................   *                           
....................   *                       
....................   ****************************************************************************** 
....................   */ 
.................... #ifndef _MAIN_ 
.................... #define _MAIN_ 
.................... /***************KHAI BAO CAC THU VIEN*****************/    
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... //#include <stdio.h> 
.................... //#include <hc595\hc595.h>            // Su dung IC74HC595 
.................... //#include <key_4x4\key_4x4.h>         // Su dung KEY PAD 4X4 
.................... //#include <lcd\lcd.h>               // Su dung LCD 16x2 
.................... //#include <ds1307\ds1307.h>         // Su dung DS1307 
.................... /**************KHAI BAO CAU HINH FUSE BIT************/ 
.................... /////////////////////////////////////////////////////// 
.................... //                                                   // 
.................... // Voi moi muc phai chon mot trong danh sach dua ra  // 
.................... //                                                   // 
.................... /////////////////////////////////////////////////////// 
....................  
.................... //_________________POINTER AND ADC____________________ 
....................  
.................... #device *=16 adc=10          //   su dung con tro 16 bit, bo chuyen doi ADC 10 bit 
.................... //#device *=16 adc=8          //  su dung con tro 16 bit, bo chuyen doi ADC 8 bit 
....................  
.................... //__________________WATCH DOG TIMER___________________ 
....................  
.................... #FUSES NOWDT                   //   khong su dung bo Watch Dog Timer 
....................  
.................... //__________________HIGH SPEED OSC____________________ 
....................  
.................... //#FUSES LP                        // Su dung nguon dao dong tan so thap < 200 khz 
.................... //#FUSES XT                        // Dao dong thach anh <= 4mhz voi PCM/PCH , 3mhz to 10 mhz voi PCD 
.................... //#FUSES RC                        // Dao dong RC voi CLKOUT 
.................... #FUSES HS                      //Dao dong tan so cao (> 4mhz voi PCM/PCH) (>10mhz voi PCD) 
....................  
.................... //__________________POWER UP TIMER____________________ 
....................  
.................... #FUSES NOPUT                    //Khong su dung Power Up Timer 
.................... //#FUSES PUT                        //Su dung Power Up Timer 
.................... //__________________BROWN OUT_________________________ 
....................  
.................... #FUSES NOBROWNOUT               //Khong reset chip khi BrownOut 
.................... //#FUSES BROWNOUT                   //Reset chi khi co BrownOut 
.................... //______________LOW VOLTAGE PROGRAM___________________ 
....................  
.................... #FUSES NOLVP                    //No low voltage programing, B3(PIC16) or B5(PIC18) used for I/O 
.................... //#FUSES LVP                        //Low Voltage Programming on B3(PIC16) or B5(PIC18) 
.................... //______________CODE PROTECED EEPROM__________________ 
....................  
.................... #FUSES NOCPD                    //Khong bao ve du lieu EEPROM 
.................... //#FUSES CPD                        //Dung che do bao ve du lieu EEPROM 
....................  
.................... //_____________PROGRAM WRITE PROTECED_________________ 
....................  
.................... //#FUSES WRT                      //Program Memory Write Protected 
.................... //#FUSES WRT_50%                  //Lower half of Program Memory is Write Protected 
.................... //#FUSES WRT_5%                   //Lower 255 bytes of Program Memory is Write Protected 
.................... #FUSES NOWRT                    //Program memory not write protected 
....................  
.................... //_____________ENABLE DEBUG MODE FOR ICD______________ 
....................  
.................... //#device ICD=TRUE            // Kich hoat chuc nang DEBUG ICD Integrated Chip Debugging 
.................... //________________DEBUG FOR ICD_______________________ 
....................  
.................... #FUSES NODEBUG                  //Khong su dung che do Debug voi ICD 
.................... //#FUSES DEBUG                      // Su dung che do Debug voi ICD 
....................  
.................... //___________CODE PROTECED FROM READING_______________ 
.................... #FUSES NOPROTECT                // Cho phep doc lai Code 
.................... //#FUSES PROTECT                    // Khong cho phep doc lai code  
....................  
.................... //___________________CLOCK____________________________ 
....................  
.................... #use delay(clock=24000000)            // Su dung tan so 20Mhz, khong reset watch dog khi goi den ham delay. 
*
0043:  MOVLW  3A
0044:  MOVWF  04
0045:  BCF    03.7
0046:  MOVF   00,W
0047:  BTFSC  03.2
0048:  GOTO   057
0049:  MOVLW  07
004A:  MOVWF  78
004B:  CLRF   77
004C:  DECFSZ 77,F
004D:  GOTO   04C
004E:  DECFSZ 78,F
004F:  GOTO   04B
0050:  MOVLW  C7
0051:  MOVWF  77
0052:  DECFSZ 77,F
0053:  GOTO   052
0054:  NOP
0055:  DECFSZ 00,F
0056:  GOTO   049
0057:  RETURN
.................... //#use delay(clock=20000000,RESTART_WDT)   // Su dung tan so 20Mhz, reset watch dog khi goi den ham delay. 
....................  
.................... //________________FAST_STANDAR I/O PORTA___________________ 
....................  
.................... //#use FAST_IO(A)          // Thiet lap che do fast I/O cho PORTA, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... #use STANDARD_IO(A)     // Thiet lap che do chuan I/O cho PORTA, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(A)       // 
....................  
.................... //________________FAST_STANDAR I/O PORTB___________________ 
....................  
.................... //#use FAST_IO(B)          // Thiet lap che do fast I/O cho PORTB, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... #use STANDARD_IO(B)     // Thiet lap che do chuan I/O cho PORTB, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(B)       // 
....................  
.................... //________________FAST_STANDAR I/O PORTC____________________ 
....................  
.................... #use FAST_IO(C)          // Thiet lap che do fast I/O cho PORTC, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... //#use STANDARD_IO(C)     // Thiet lap che do chuan I/O cho PORTC, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(C)       // 
....................  
.................... //________________FAST_STANDAR I/O PORTD_____________________ 
....................  
.................... #use FAST_IO(D)          // Thiet lap che do fast I/O cho PORTD, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... //#use STANDARD_IO(D)     // Thiet lap che do chuan I/O cho PORTD, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(D)       // 
....................  
.................... //_______________FAST_STANDAR I/O PORTE___________________ 
....................  
.................... #use FAST_IO(E)        // Thiet lap che do fast I/O cho PORTE, yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se chi su dung 1 chu ky lenh 
.................... //#use STANDARD_IO(E)     // Thiet lap che do chuan I/O cho PORTE, khong yeu cau phai chi ro huong Vao/Ra  
....................                          // cho cac chan I/O. cac ham Input,Output se su dung 3-4 chu ky lenh 
.................... //#use FIXED_IO(E)       // 
....................  
....................  
.................... //________________________CASE_____________________________ 
....................  
....................  
.................... //#CASE               // Phan biet chu hoa va chu thuong trong khi lap trinh code 
....................  
....................  
.................... /************** DINH NGHIA CAC CHAN I/O ************/ 
....................  
.................... //////////////////////////////////////////////////////// 
.................... //   Xoa chu thich cho cac chuc nang I/O su dung       // 
.................... //  Dinh nghia lai cac chan cho phu hop voi phan cung //  
.................... //////////////////////////////////////////////////////// 
....................  
.................... //______________________I/O LCD____________________________ 
.................... #define LCD_RS PIN_E0                         
.................... #define LCD_RW PIN_E1 
.................... #define LCD_EN PIN_E2 
.................... #define LCD_D4 PIN_D4                  
.................... #define LCD_D5 PIN_D5 
.................... #define LCD_D6 PIN_D6 
.................... #define LCD_D7 PIN_D7  
.................... //_____________________I/O HC595___________________________ 
.................... #define HC595_LATCH_BIT    PIN_C3 
.................... #define HC595_LATCH_FRAME  PIN_C4  
.................... #define HC595_DATA         PIN_C5  
.................... //____________________I/O DS1307___________________________ 
.................... //__________________I/O KEY PAD 4x4________________________ 
....................    /*#define ROW1   PIN_D0 
....................    #define ROW2   PIN_D1 
....................    #define ROW3   PIN_D2 
....................    #define ROW4   PIN_D3 
....................    #define COL1   PIN_D4 
....................    #define COL2   PIN_D5 
....................    #define COL3   PIN_D6 
....................    #define COL4   PIN_D7*/ 
.................... //____________________OTHER________________________________ 
.................... #define DQ PIN_B5 
.................... #endif 
....................  
.................... #include <var.h> 
.................... #ifndef _VAR_ 
.................... #define _VAR_ 
.................... #endif                                           
....................  
.................... #include "lcd.c" 
.................... /** 
....................   ****************************************************************************** 
....................   * Ten Tep      :        lcd_16x2.c 
....................   * Tac Gia      :        Nguyen Quy Nhat 
....................   * Cong Ty      :         MinhHaGroup 
....................   *   Website    :         BanLinhKien.Vn 
....................   * Phien Ban   :         V1.0.0 
....................   * Ngay         :       31-07-2012 
....................   * Tom Tat   :     Dinh nghia cac ham dieu khien LCD 16x2. 
....................   *            
....................   * 
....................   ****************************************************************************** 
....................   * Chu Y      : 
....................   *                       
....................   ****************************************************************************** 
....................   */ 
.................... //Tao Xung 
....................  void LCD_Enable(void) 
.................... { 
....................  output_high(LCD_EN); 
0058:  BSF    09.2
....................  delay_us(3); 
0059:  MOVLW  05
005A:  MOVWF  77
005B:  DECFSZ 77,F
005C:  GOTO   05B
005D:  GOTO   05E
....................  output_low(LCD_EN); 
005E:  BCF    09.2
....................  delay_us(50);  
005F:  MOVLW  63
0060:  MOVWF  77
0061:  DECFSZ 77,F
0062:  GOTO   061
0063:  GOTO   064
.................... } 
0064:  RETURN
.................... //Ham Gui 4 Bit Du Lieu Ra LCD 
....................  void LCD_Send4Bit( unsigned char Data ) 
.................... { 
....................  output_bit(LCD_D4,Data&0x01); 
*
001C:  BTFSC  3D.0
001D:  GOTO   020
001E:  BCF    08.4
001F:  GOTO   021
0020:  BSF    08.4
....................  output_bit(LCD_D5,(Data>>1)&1); 
0021:  BCF    03.0
0022:  RRF    3D,W
0023:  ANDLW  01
0024:  BTFSS  03.2
0025:  GOTO   028
0026:  BCF    08.5
0027:  GOTO   029
0028:  BSF    08.5
....................  output_bit(LCD_D6,(Data>>2)&1); 
0029:  RRF    3D,W
002A:  MOVWF  77
002B:  RRF    77,F
002C:  MOVLW  3F
002D:  ANDWF  77,F
002E:  MOVF   77,W
002F:  ANDLW  01
0030:  BTFSS  03.2
0031:  GOTO   034
0032:  BCF    08.6
0033:  GOTO   035
0034:  BSF    08.6
....................  output_bit(LCD_D7,(Data>>3)&1); 
0035:  RRF    3D,W
0036:  MOVWF  77
0037:  RRF    77,F
0038:  RRF    77,F
0039:  MOVLW  1F
003A:  ANDWF  77,F
003B:  MOVF   77,W
003C:  ANDLW  01
003D:  BTFSS  03.2
003E:  GOTO   041
003F:  BCF    08.7
0040:  GOTO   042
0041:  BSF    08.7
.................... } 
0042:  RETURN
.................... // Ham Gui 1 Lenh Cho LCD 
....................  void LCD_SendCommand (unsigned char command ) 
.................... { 
.................... LCD_Send4Bit  ( command >>4 );/* Gui 4 bit cao */ 
*
0065:  SWAPF  3B,W
0066:  MOVWF  3C
0067:  MOVLW  0F
0068:  ANDWF  3C,F
0069:  MOVF   3C,W
006A:  MOVWF  3D
006B:  CALL   01C
.................... LCD_Enable () ; 
006C:  CALL   058
.................... LCD_Send4Bit  ( command  );      /* Gui 4 bit thap*/ 
006D:  MOVF   3B,W
006E:  MOVWF  3D
006F:  CALL   01C
.................... LCD_Enable () ; 
0070:  CALL   058
.................... } 
0071:  RETURN
.................... // Ham Khoi Tao LCD 
....................  void LCD_Init ( void ) 
.................... { 
.................... output_drive(LCD_D4); 
0072:  BSF    03.5
0073:  BCF    08.4
.................... output_drive(LCD_D5); 
0074:  BCF    08.5
.................... output_drive(LCD_D6); 
0075:  BCF    08.6
.................... output_drive(LCD_D7); 
0076:  BCF    08.7
.................... output_drive(LCD_EN); 
0077:  BCF    09.2
.................... output_drive(LCD_RS); 
0078:  BCF    09.0
.................... output_drive(LCD_RW); 
0079:  BCF    09.1
.................... LCD_Send4Bit(0x00); 
007A:  BCF    03.5
007B:  CLRF   3D
007C:  CALL   01C
.................... delay_ms(20); 
007D:  MOVLW  14
007E:  MOVWF  3A
007F:  CALL   043
.................... output_low(LCD_RS); 
0080:  BCF    09.0
.................... output_low(LCD_RW); 
0081:  BCF    09.1
.................... LCD_Send4Bit(0x03); 
0082:  MOVLW  03
0083:  MOVWF  3D
0084:  CALL   01C
.................... LCD_Enable(); 
0085:  CALL   058
.................... delay_ms(5); 
0086:  MOVLW  05
0087:  MOVWF  3A
0088:  CALL   043
.................... LCD_Enable(); 
0089:  CALL   058
.................... delay_us(100); 
008A:  MOVLW  C7
008B:  MOVWF  77
008C:  DECFSZ 77,F
008D:  GOTO   08C
008E:  GOTO   08F
.................... LCD_Enable(); 
008F:  CALL   058
.................... LCD_Send4Bit(0x02); 
0090:  MOVLW  02
0091:  MOVWF  3D
0092:  CALL   01C
.................... LCD_Enable(); 
0093:  CALL   058
.................... LCD_SendCommand( 0x28 );      // giao thuc 4 bit, hien thi 2 hang, ki tu 5x8 
0094:  MOVLW  28
0095:  MOVWF  3B
0096:  CALL   065
.................... LCD_SendCommand( 0x0c);    // cho phep hien thi man hinh 
0097:  MOVLW  0C
0098:  MOVWF  3B
0099:  CALL   065
.................... LCD_SendCommand( 0x06 );      // tang ID, khong dich khung hinh 
009A:  MOVLW  06
009B:  MOVWF  3B
009C:  CALL   065
.................... LCD_SendCommand( 0x01 ); // xoa toan bo khung hinh 
009D:  MOVLW  01
009E:  MOVWF  3B
009F:  CALL   065
.................... } 
00A0:  BCF    0A.3
00A1:  BCF    0A.4
00A2:  GOTO   1E6 (RETURN)
.................... void LCD_Gotoxy(unsigned char x, unsigned char y) 
.................... { 
....................   unsigned char address; 
....................   if(!y) 
*
011E:  MOVF   38,F
011F:  BTFSS  03.2
0120:  GOTO   125
....................   address = (0x80+x); 
0121:  MOVLW  80
0122:  ADDWF  37,W
0123:  MOVWF  39
....................   else 
0124:  GOTO   128
....................   address = (0xC0+x); 
0125:  MOVLW  C0
0126:  ADDWF  37,W
0127:  MOVWF  39
....................   delay_us(1000); 
0128:  MOVLW  01
0129:  MOVWF  3A
012A:  CALL   043
....................   LCD_SendCommand(address); 
012B:  MOVF   39,W
012C:  MOVWF  3B
012D:  CALL   065
....................   delay_ms(10); 
012E:  MOVLW  0A
012F:  MOVWF  3A
0130:  CALL   043
.................... } 
0131:  RETURN
.................... // Ham Xoa Man Hinh LCD 
.................... void LCD_Clear() 
.................... { 
....................   LCD_SendCommand(0x01);   
*
0115:  MOVLW  01
0116:  MOVWF  3B
0117:  CALL   065
....................   delay_ms(10); 
0118:  MOVLW  0A
0119:  MOVWF  3A
011A:  CALL   043
.................... } 
011B:  BCF    0A.3
011C:  BCF    0A.4
011D:  GOTO   1FF (RETURN)
.................... // Ham Gui 1 Ki Tu Len LCD 
....................  void LCD_PutChar ( unsigned char Data ) 
.................... { 
....................  output_high(LCD_RS); 
*
010B:  BSF    09.0
....................  LCD_SendCommand( Data ); 
010C:  MOVF   3A,W
010D:  MOVWF  3B
010E:  CALL   065
....................  output_low(LCD_RS); 
010F:  BCF    09.0
.................... } 
.................... void LCD_Puts (char *s) 
.................... { 
....................    while (*s) 
....................    { 
*
00F6:  MOVF   38,W
00F7:  MOVWF  7A
00F8:  MOVF   37,W
00F9:  MOVWF  04
00FA:  BCF    03.7
00FB:  BTFSC  7A.0
00FC:  BSF    03.7
00FD:  MOVF   00,F
00FE:  BTFSC  03.2
00FF:  GOTO   114
....................       LCD_PutChar(*s); 
0100:  MOVF   38,W
0101:  MOVWF  7A
0102:  MOVF   37,W
0103:  MOVWF  04
0104:  BCF    03.7
0105:  BTFSC  7A.0
0106:  BSF    03.7
0107:  MOVF   00,W
0108:  MOVWF  39
0109:  MOVF   39,W
010A:  MOVWF  3A
....................       s++; 
*
0110:  INCF   37,F
0111:  BTFSC  03.2
0112:  INCF   38,F
....................    } 
0113:  GOTO   0F6
.................... } 
0114:  RETURN
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... #include "timer.c" 
.................... #ifndef __TIMER_ 
.................... #define __TIMER_ 
.................... void timer0_config() 
.................... { 
.................... ////////////////////////////////////////////////////////////// 
.................... //              Cau Hinh Timer 0                     // 
.................... //         T_tm0: Chu ky xung dem cua timer 0            // 
.................... //         T_osc: Chu ky dao dong su dung cho chip         // 
.................... ////////////////////////////////////////////////////////////// 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1|RTCC_8_bit);      //   T_tm0=T_osc*4*1 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_2|RTCC_8_bit);      //   T_tm0=T_osc*4*2 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_4|RTCC_8_bit);      //   T_tm0=T_osc*4*4 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_8|RTCC_8_bit);      //   T_tm0=T_osc*4*8 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_16|RTCC_8_bit);      //   T_tm0=T_osc*4*16 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_32|RTCC_8_bit);      //   T_tm0=T_osc*4*32 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_64|RTCC_8_bit);      //   T_tm0=T_osc*4*64 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_128|RTCC_8_bit);      //   T_tm0=T_osc*4*128 
.................... //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256|RTCC_8_bit);      //   T_tm0=T_osc*4*256 
.................... setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_1|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 1 xung len tai chan PIN_A4 (T0CKI) 
*
0132:  BSF    03.5
0133:  MOVF   01,W
0134:  ANDLW  C7
0135:  IORLW  28
0136:  MOVWF  01
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_2|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 2 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_4|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 4 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_8|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 8 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_16|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 16 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_32|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 32 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_64|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 64 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_128|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 128 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_256|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 256 xung len tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_1|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 1 suon xuong tai chan PIN_A4 (T0CKI)    
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_2|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 2 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_4|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 4 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_8|RTCC_8_bit);      //   Tang gia tri timer0 len 1 khi co 8 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_16|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 16 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_32|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 32 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_64|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 64 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_128|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 128 suon xuong tai chan PIN_A4 (T0CKI) 
.................... //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_256|RTCC_8_bit);   //   Tang gia tri timer0 len 1 khi co 256 suon xuong tai chan PIN_A4 (T0CKI) 
....................  
.................... /******************Thiet lap ngat timer*********************/ 
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
.................... //                   NGAT TRAN TIMER 0            // 
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
.................... enable_interrupts(INT_TIMER0);   //Cho phep ngat tran timer0 hoat dong 
0137:  BCF    03.5
0138:  BSF    0B.5
.................... //disable_interrupts(INT_TIMER0);   //Khong cho phep ngat tran timer0 hoat dong (mac dinh) 
....................  
.................... } 
0139:  BCF    0A.3
013A:  BCF    0A.4
013B:  GOTO   211 (RETURN)
.................... void timer1_config() 
.................... { 
.................... //setup_timer_1(T1_INTERNAL|T1_DIV_BY_1);               // 
.................... //setup_timer_1(T1_INTERNAL|T1_DIV_BY_2);               // 
.................... //setup_timer_1(T1_INTERNAL|T1_DIV_BY_4);               // 
.................... //setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);               // 
.................... //setup_timer_1(T1_EXTERNAL|T1_DIV_BY_1);               // 
.................... //setup_timer_1(T1_EXTERNAL|T1_CLK_OUT);               // 
.................... //setup_timer_1(T1_EXTERNAL|T1_EXTERNAL_SYNC);            // 
.................... //setup_timer_1(T1_EXTERNAL|T1_CLK_OUT|T1_EXTERNAL_SYNC);   // 
.................... setup_timer_1(T1_DISABLED);                           // 
....................  
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
.................... //               NGAT TRAN TIMER 1            // 
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
.................... //enable_interrupts(INT_TIMER1);   //Cho phep ngat tran timer1 hoat dong 
.................... disable_interrupts(INT_TIMER1);   //Khong cho phep ngat tran timer1 hoat dong (mac dinh) 
....................  
.................... } 
.................... void timer2_config() 
.................... { 
.................... //############################################################ 
.................... //              Cau Hinh Timer 2                     // 
.................... //         Over_Period: 1-255                        // 
.................... //         Int_Period : 1-16                        // 
.................... //         T_Ov   :Chu ky tran bo dem timer2            // 
.................... //         T_In   :Chu ky xay ra ngat tran timer 0      // 
.................... //         T_osc   : Chu ky dao dong su dung cho chip      // 
.................... //############################################################ 
....................  
.................... //setup_timer_2(T2_DIV_BY_1,Over_Period,Int_Period);      //   T_ov=T_osc*4*1*(1+Over_Period)   ;   T_In=T_osc*4*1*(1+Over_Period)*Int_Period 
.................... //setup_timer_2(T2_DIV_BY_4,Over_Period,Int_Period);      //   T_ov=T_osc*4*4*(1+Over_Period)   ;   T_In=T_osc*4*4*(1+Over_Period)*Int_Period 
.................... //setup_timer_2(T2_DIV_BY_16,Over_Period,Int_Period);      //   T_ov=T_osc*4*16*(1+Over_Period)   ;   T_In=T_osc*4*16*(1+Over_Period)*Int_Period 
.................... //setup_timer_2(T2_DISABLED,0,1);                      //   Khong su dung bo dem timer2 
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
.................... //               NGAT TRAN TIMER 2            // 
.................... //++++++++++++++++++++++++++++++++++++++++++++++++++// 
....................  
.................... //enable_interrupts(INT_TIMER2);   //Cho phep ngat tran timer2 hoat dong 
.................... disable_interrupts(INT_TIMER2);   //Khong cho phep ngat tran timer2 hoat dong (mac dinh) 
.................... } 
.................... #endif 
....................  
.................... void main() 
.................... {   
*
01D7:  CLRF   04
01D8:  BCF    03.7
01D9:  MOVLW  1F
01DA:  ANDWF  03,F
01DB:  CLRF   21
01DC:  CLRF   20
01DD:  BSF    03.5
01DE:  BSF    1F.0
01DF:  BSF    1F.1
01E0:  BSF    1F.2
01E1:  BCF    1F.3
01E2:  MOVLW  07
01E3:  MOVWF  1C
....................    unsigned char str[20]; 
....................    unsigned int8 Value; 
....................    LCD_Init(); 
01E4:  BCF    03.5
01E5:  GOTO   072
....................    sprintf(str,"   DEMO COUNTER"); 
01E6:  CLRF   21
01E7:  MOVLW  22
01E8:  MOVWF  20
01E9:  MOVLW  04
01EA:  BSF    03.6
01EB:  MOVWF  0D
01EC:  MOVLW  00
01ED:  MOVWF  0F
01EE:  BCF    03.6
01EF:  CALL   0B0
....................    delay_ms(10); 
01F0:  MOVLW  0A
01F1:  MOVWF  3A
01F2:  CALL   043
....................    LCD_Puts(str); 
01F3:  CLRF   38
01F4:  MOVLW  22
01F5:  MOVWF  37
01F6:  CALL   0F6
....................    delay_ms(1000); 
01F7:  MOVLW  04
01F8:  MOVWF  37
01F9:  MOVLW  FA
01FA:  MOVWF  3A
01FB:  CALL   043
01FC:  DECFSZ 37,F
01FD:  GOTO   1F9
....................    LCD_Clear(); 
01FE:  GOTO   115
....................    sprintf(str,"BanLinhKien.Vn"); 
01FF:  CLRF   21
0200:  MOVLW  22
0201:  MOVWF  20
0202:  MOVLW  0C
0203:  BSF    03.6
0204:  MOVWF  0D
0205:  MOVLW  00
0206:  MOVWF  0F
0207:  BCF    03.6
0208:  CALL   0B0
....................    LCD_Gotoxy(0,0); 
0209:  CLRF   37
020A:  CLRF   38
020B:  CALL   11E
....................    LCD_Puts(str); 
020C:  CLRF   38
020D:  MOVLW  22
020E:  MOVWF  37
020F:  CALL   0F6
....................    timer0_config(); 
0210:  GOTO   132
....................    set_timer0(0); 
0211:  CLRF   01
....................    while(TRUE) 
....................    { 
....................       delay_ms(1000); 
0212:  MOVLW  04
0213:  MOVWF  37
0214:  MOVLW  FA
0215:  MOVWF  3A
0216:  CALL   043
0217:  DECFSZ 37,F
0218:  GOTO   214
....................       Value=get_timer0(); 
0219:  MOVF   01,W
021A:  MOVWF  36
....................       LCD_Gotoxy(0,1); 
021B:  CLRF   37
021C:  MOVLW  01
021D:  MOVWF  38
021E:  CALL   11E
....................       sprintf(str,"F = %2u xung/s",Value); 
021F:  CLRF   21
0220:  MOVLW  22
0221:  MOVWF  20
0222:  MOVLW  14
0223:  BSF    03.6
0224:  MOVWF  0D
0225:  MOVLW  00
0226:  MOVWF  0F
0227:  BCF    03.0
0228:  MOVLW  04
0229:  BCF    03.6
022A:  MOVWF  37
022B:  CALL   13C
022C:  MOVF   36,W
022D:  MOVWF  37
022E:  MOVLW  11
022F:  MOVWF  38
0230:  GOTO   1A0
0231:  MOVLW  17
0232:  BSF    03.6
0233:  MOVWF  0D
0234:  MOVLW  00
0235:  MOVWF  0F
0236:  BSF    03.0
0237:  MOVLW  07
0238:  BCF    03.6
0239:  MOVWF  37
023A:  CALL   13C
....................       LCD_Puts(str); 
023B:  CLRF   38
023C:  MOVLW  22
023D:  MOVWF  37
023E:  CALL   0F6
....................       set_timer0(0); 
023F:  CLRF   01
....................    } 
0240:  GOTO   212
.................... }                 
0241:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
